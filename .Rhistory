<<<<<<< HEAD
##outpt.BLUP <- cbind(outpt.BLUP, Pheno.BLUP.result$u)
outpt.HEM <- cbind(outpt.HEM, Pheno.HEM.result$u)
#   #Permute Thresholds for Phenos - this is what takes forever
#   ## troubleshoot: it's breaking here
#   ##perm.u.BLUP <- vector()
#   perm.u.HEM <- vector()
#   #should be p in 1:1000
#   for(p in 1:3) {
#     if(p %% 10 == 0) {print(paste("Thresh sample:", p, "--", Sys.time()))}
#     temp.Pheno <- sample(dat[,i], length(dat[,i]), replace = FALSE) ## skip to troubleshoot
#     print(try(temp.BLUP  <- bigRR(y = temp.Pheno, X = MyX, Z = SNPs, GPU = TRUE),silent = TRUE))
#     #works up to here with 3 i's and 3 p's
#     try(temp.HEM <- bigRR_update(temp.BLUP, SNPs)) #REF change- was bigRR_update(Pheno.BLUP.result...
#     ##perm.u.BLUP <- c(perm.u.BLUP, temp.BLUP$u) #REF change- ...c(perm.u.HEM...)
#     perm.u.HEM <- c(perm.u.HEM, temp.HEM$u)
#
#   }
#   #write.csv(perm.u.HEM, paste("PermEffects_",colnames(dat)[i],".csv",sep=""))
#   ##thresh.BLUP$"0.95Thresh"[i] <- quantile(perm.u.BLUP,0.95)
#   ##thresh.BLUP$"0.975Thresh"[i] <- quantile(perm.u.BLUP,0.975)
#   ##thresh.BLUP$"0.99Thresh"[i] <- quantile(perm.u.BLUP,0.99)
#   ##thresh.BLUP$"0.999Thresh"[i] <- quantile(perm.u.BLUP,0.999)
#   thresh.HEM$"0.95Thresh"[i] <- quantile(abs(perm.u.HEM),0.95)
#   thresh.HEM$"0.975Thresh"[i] <- quantile(abs(perm.u.HEM),0.975)
#   thresh.HEM$"0.99Thresh"[i] <- quantile(abs(perm.u.HEM),0.99)
#   thresh.HEM$"0.999Thresh"[i] <- quantile(abs(perm.u.HEM),0.999)
#   ##colnames(outpt.BLUP)[i+1] <- paste(colnames(dat)[i],"BLUP",sep=".")
#   colnames(outpt.HEM)[i+1] <- paste(colnames(dat)[i],"HEM",sep=".")
# }
#
# #Give column names to the thresholds from the HEM list
# for(j in 1:length(thresh.HEM)) {
#   names(thresh.HEM[[j]]) <- colnames(dat)
}
#
# #RF-give row names to thresh.HEM and thresh.BLUP so that threshhold values will line up correctly with phenotypes, and you can see which threshold value is displayed
# ##thresh.BLUP$"0.95Thresh" <- c("0.95 Thresh", thresh.BLUP$"0.95Thresh")
# ##thresh.BLUP$"0.975Thresh" <- c("0.975 Thresh", thresh.BLUP$"0.975Thresh")
# ##thresh.BLUP$"0.99Thresh" <- c("0.99 Thresh", thresh.BLUP$"0.99Thresh")
# ##thresh.BLUP$"0.999Thresh" <- c("0.999 Thresh", thresh.BLUP$"0.999Thresh")
# thresh.HEM$"0.95Thresh" <- c("0.95 Thresh", thresh.HEM$"0.95Thresh")
# thresh.HEM$"0.975Thresh" <- c("0.975 Thresh", thresh.HEM$"0.975Thresh")
# thresh.HEM$"0.99Thresh" <- c("0.99 Thresh", thresh.HEM$"0.99Thresh")
# thresh.HEM$"0.999Thresh" <- c("0.999 Thresh", thresh.HEM$"0.999Thresh")
# #Write results to output
# ##write.csv(rbind(thresh.BLUP$"0.95Thresh",thresh.BLUP$"0.975Thresh",thresh.BLUP$"0.99Thresh",thresh.BLUP$"0.999Thresh",outpt.BLUP),"AthalianaLesion.BLUP.csv")
# write.csv(rbind(thresh.HEM$"0.95Thresh",thresh.HEM$"0.975Thresh",thresh.HEM$"0.99Thresh",thresh.HEM$"0.999Thresh",outpt.HEM),"data/BcAtGWAS/04_bigRRoutput/Troubleshoot/AthalianaLesion.HEM.csv")
# Sys.time()
write.csv(outpt.HEM,"data/BcAtGWAS/04_bigRRoutput/Troubleshoot/AthalianaLesion.HEM.csv")
Sys.time()
rm(list=ls())
setwd("~/Documents/GitRepos/BcEudicotGWAS/")
#########################
# This makes the bigRR_update run through the GPU
# You need to do this first to mask the native 'bigRR_update' in the bigRR package
# one alternative to family = gaussian(link = identity) is family = poisson(link = log)
bigRR_update <- function (obj, Z, family = gaussian(link = identity), tol.err = 1e-06,
tol.conv = 1e-08)
{
w <- as.numeric(obj$u^2/(1 - obj$leverage))
w[w < tol.err] <- tol.err
bigRR(y = obj$y, X = obj$X, Z = Z, family = family, weight = w,
tol.err = tol.err, tol.conv = tol.conv, GPU = TRUE )
}
########################
#NOTE1 FROM RACHEL:  we need bigRR1.3-9 to get GPU option
# must download R-Forge version bigRR1.3-9tar.gz and manually install
# https://r-forge.r-project.org/R/?group_id=1301
# install.packages("bigRR", repos="http://R-Forge.R-project.org")
#NOTE2 FROM RACHEL: need package 'gputools' but CRAN version fails to install
# must first install Nvidia's CUDA toolkit -current version is 7.5
# installed from developer.nvidia.com/cuda-downloads
library(bigRR) #check if version is 1.3-9
#Get genotype data
SNPs <- read.csv("data/BcAtGWAS/03_bigRRinput/binSNP_bigRR_MAF20hp.csv", row.names = 1)
FullSNPs <- SNPs
SNPs <- FullSNPs
#add a column with position as chr.base
SNPs$Chr.Base <- do.call(paste, c(SNPs[c("X.CHROM","POS")], sep="."))
#Rachel's attempt------------------=====================================
rownames(SNPs) <- SNPs[,93] #set the new column of chrom.base as rownames - this could maybe be written as: rownames(SNPs) <- SNPs$Chr.Base?
SNPs <- SNPs[,4:92] #take out first three cols (X.CHROM, POS, REF) and new last col (Chr.Base). dim(SNPs) should now be [345485, 91], colnames(SNPs) are all Bc Isolates, rownames(SNPs) are all Chr.Base
#troubleshoot: try removing X1.02.19 because it wasn't in tomato GWAS
#SNPs <- SNPs[,-16]
SNPdf <- SNPs
#Rachel's attempt ----FIN-----============================================
#what does this do?
#loads SNP dataframe as a matrix?
#makes SNP states numeric (also transposes SNP matrix)
SNPs <- as.matrix(t(SNPs))
for(i in 1:dim(SNPs)[1]) {
SNPs[i,] <- as.numeric(SNPs[i,])
}
Phenos <- read.csv("data/BcAtGWAS/03_bigRRinput/At_Pheno_bigRR.csv", row.names = 1)
#note: in data frame replaced one NA (npr1.Cam, 01.02.02) with 7.91 (average for npr1)
#remove duplicate row 77 (KGB1 duplicate)
Phenos <- Phenos[-77,]
#add constant to remove negative values
Phenos$Col0.Cam <- Phenos$Col0.Cam + 9
Phenos$anac055.Cam <- Phenos$anac055.Cam + 4
Phenos$coi1.Cam <- Phenos$coi1.Cam + 2
Phenos$tga3.Cam <- Phenos$tga3.Cam + 3
#try standardizing Lesion Size Data (large values ~ 1000s)
Phenos$Col0.Les.s <- (Phenos$Col0.Les - mean(Phenos$Col0.Les))/sd(Phenos$Col0.Les) + 2
Phenos$anac055.Les.s <- (Phenos$anac055.Les - mean(Phenos$anac055.Les))/sd(Phenos$anac055.Les) +3
Phenos$coi1.Les.s <- (Phenos$coi1.Les - mean(Phenos$coi1.Les))/sd(Phenos$coi1.Les) +3
Phenos$npr1.Les.s <- (Phenos$npr1.Les - mean(Phenos$npr1.Les))/sd(Phenos$npr1.Les) +3
Phenos$pad3.Les.s <- (Phenos$pad3.Les - mean(Phenos$pad3.Les))/sd(Phenos$pad3.Les) +3
Phenos$tga3.Les.s <- (Phenos$tga3.Les - mean(Phenos$tga3.Les))/sd(Phenos$coi1.Les) +2
#only keep columns with standardized phenotypes
attach(Phenos)
Phenos <- Phenos[,c("Rename","Col0.Cam","Col0.Les.s","Col0.AT3G26830","Col0.AT2G30770" ,"Col.0AT4G30530","anac055.Cam","anac055.Les.s","coi1.Cam","coi1.Les.s","npr1.Cam","npr1.Les.s","tga3.Cam","tga3.Les.s")]
#troubleshoot: try removing X1.02.19 since it wasn't used in tomato GWAS
#Phenos <- Phenos[-16,]
#tried skipping first few phenos (6:14)
#complete is: 2:14
dat <- as.data.frame((Phenos[,2:14]))  #INSERT PHENOTYPE COLUMNS HERE
write.csv(dat, "mydata.csv")
dat <- read.csv("mydata.csv")
dat <- dat[,-1]
outpt.BLUP <- colnames(SNPs)
outpt.HEM <- colnames(SNPs)
thresh.BLUP <- list("0.95Thresh" = NA, "0.975Thresh" = NA, "0.99Thresh" = NA, "0.999Thresh" = NA)
thresh.HEM <- list("0.95Thresh" = NA, "0.975Thresh" = NA, "0.99Thresh" = NA, "0.999Thresh" = NA)
#Calculate BLUP and HEMs for all phenotypes
Sys.time()
#should be for (i in 1:dim(dat)[2])  but only trying with 1:3
for(i in 1:dim(dat)[2]) { #i will be each plant genotype
print(colnames(dat)[i])
MyX <- matrix(1, dim(dat)[1], 1)
Pheno.BLUP.result <- bigRR(y = dat[,i], X = MyX, Z = SNPs, GPU = TRUE)
Pheno.HEM.result <- bigRR_update(Pheno.BLUP.result, SNPs)
##outpt.BLUP <- cbind(outpt.BLUP, Pheno.BLUP.result$u)
outpt.HEM <- cbind(outpt.HEM, Pheno.HEM.result$u)
#   #Permute Thresholds for Phenos - this is what takes forever
#   ## troubleshoot: it's breaking here
#   ##perm.u.BLUP <- vector()
#   perm.u.HEM <- vector()
#   #should be p in 1:1000
#   for(p in 1:3) {
#     if(p %% 10 == 0) {print(paste("Thresh sample:", p, "--", Sys.time()))}
#     temp.Pheno <- sample(dat[,i], length(dat[,i]), replace = FALSE) ## skip to troubleshoot
#     print(try(temp.BLUP  <- bigRR(y = temp.Pheno, X = MyX, Z = SNPs, GPU = TRUE),silent = TRUE))
#     #works up to here with 3 i's and 3 p's
#     try(temp.HEM <- bigRR_update(temp.BLUP, SNPs)) #REF change- was bigRR_update(Pheno.BLUP.result...
#     ##perm.u.BLUP <- c(perm.u.BLUP, temp.BLUP$u) #REF change- ...c(perm.u.HEM...)
#     perm.u.HEM <- c(perm.u.HEM, temp.HEM$u)
#
#   }
#   #write.csv(perm.u.HEM, paste("PermEffects_",colnames(dat)[i],".csv",sep=""))
#   ##thresh.BLUP$"0.95Thresh"[i] <- quantile(perm.u.BLUP,0.95)
#   ##thresh.BLUP$"0.975Thresh"[i] <- quantile(perm.u.BLUP,0.975)
#   ##thresh.BLUP$"0.99Thresh"[i] <- quantile(perm.u.BLUP,0.99)
#   ##thresh.BLUP$"0.999Thresh"[i] <- quantile(perm.u.BLUP,0.999)
#   thresh.HEM$"0.95Thresh"[i] <- quantile(abs(perm.u.HEM),0.95)
#   thresh.HEM$"0.975Thresh"[i] <- quantile(abs(perm.u.HEM),0.975)
#   thresh.HEM$"0.99Thresh"[i] <- quantile(abs(perm.u.HEM),0.99)
#   thresh.HEM$"0.999Thresh"[i] <- quantile(abs(perm.u.HEM),0.999)
#   ##colnames(outpt.BLUP)[i+1] <- paste(colnames(dat)[i],"BLUP",sep=".")
#   colnames(outpt.HEM)[i+1] <- paste(colnames(dat)[i],"HEM",sep=".")
# }
#
# #Give column names to the thresholds from the HEM list
# for(j in 1:length(thresh.HEM)) {
#   names(thresh.HEM[[j]]) <- colnames(dat)
}
#
# #RF-give row names to thresh.HEM and thresh.BLUP so that threshhold values will line up correctly with phenotypes, and you can see which threshold value is displayed
# ##thresh.BLUP$"0.95Thresh" <- c("0.95 Thresh", thresh.BLUP$"0.95Thresh")
# ##thresh.BLUP$"0.975Thresh" <- c("0.975 Thresh", thresh.BLUP$"0.975Thresh")
# ##thresh.BLUP$"0.99Thresh" <- c("0.99 Thresh", thresh.BLUP$"0.99Thresh")
# ##thresh.BLUP$"0.999Thresh" <- c("0.999 Thresh", thresh.BLUP$"0.999Thresh")
# thresh.HEM$"0.95Thresh" <- c("0.95 Thresh", thresh.HEM$"0.95Thresh")
# thresh.HEM$"0.975Thresh" <- c("0.975 Thresh", thresh.HEM$"0.975Thresh")
# thresh.HEM$"0.99Thresh" <- c("0.99 Thresh", thresh.HEM$"0.99Thresh")
# thresh.HEM$"0.999Thresh" <- c("0.999 Thresh", thresh.HEM$"0.999Thresh")
# #Write results to output
# ##write.csv(rbind(thresh.BLUP$"0.95Thresh",thresh.BLUP$"0.975Thresh",thresh.BLUP$"0.99Thresh",thresh.BLUP$"0.999Thresh",outpt.BLUP),"AthalianaLesion.BLUP.csv")
# write.csv(rbind(thresh.HEM$"0.95Thresh",thresh.HEM$"0.975Thresh",thresh.HEM$"0.99Thresh",thresh.HEM$"0.999Thresh",outpt.HEM),"data/BcAtGWAS/04_bigRRoutput/Troubleshoot/AthalianaLesion.HEM.csv")
# Sys.time()
write.csv(outpt.HEM,"data/BcAtGWAS/04_bigRRoutput/Troubleshoot/AthalianaLesion.HEM.csv")
Sys.time()
rm(list=ls())
setwd("~/Documents/GitRepos/BcEudicotGWAS/")
#########################
# This makes the bigRR_update run through the GPU
# You need to do this first to mask the native 'bigRR_update' in the bigRR package
# one alternative to family = gaussian(link = identity) is family = poisson(link = log)
bigRR_update <- function (obj, Z, family = gaussian(link = identity), tol.err = 1e-06,
tol.conv = 1e-08)
{
w <- as.numeric(obj$u^2/(1 - obj$leverage))
w[w < tol.err] <- tol.err
bigRR(y = obj$y, X = obj$X, Z = Z, family = family, weight = w,
tol.err = tol.err, tol.conv = tol.conv, GPU = TRUE )
}
########################
#NOTE1 FROM RACHEL:  we need bigRR1.3-9 to get GPU option
# must download R-Forge version bigRR1.3-9tar.gz and manually install
# https://r-forge.r-project.org/R/?group_id=1301
# install.packages("bigRR", repos="http://R-Forge.R-project.org")
#NOTE2 FROM RACHEL: need package 'gputools' but CRAN version fails to install
# must first install Nvidia's CUDA toolkit -current version is 7.5
# installed from developer.nvidia.com/cuda-downloads
library(bigRR) #check if version is 1.3-9
#Get genotype data
SNPs <- read.csv("data/BcAtGWAS/03_bigRRinput/binSNP_bigRR_MAF20hp.csv", row.names = 1)
FullSNPs <- SNPs
SNPs <- FullSNPs
#add a column with position as chr.base
SNPs$Chr.Base <- do.call(paste, c(SNPs[c("X.CHROM","POS")], sep="."))
#Rachel's attempt------------------=====================================
rownames(SNPs) <- SNPs[,93] #set the new column of chrom.base as rownames - this could maybe be written as: rownames(SNPs) <- SNPs$Chr.Base?
SNPs <- SNPs[,4:92] #take out first three cols (X.CHROM, POS, REF) and new last col (Chr.Base). dim(SNPs) should now be [345485, 91], colnames(SNPs) are all Bc Isolates, rownames(SNPs) are all Chr.Base
#troubleshoot: try removing X1.02.19 because it wasn't in tomato GWAS
#SNPs <- SNPs[,-16]
SNPdf <- SNPs
#Rachel's attempt ----FIN-----============================================
#what does this do?
#loads SNP dataframe as a matrix?
#makes SNP states numeric (also transposes SNP matrix)
SNPs <- as.matrix(t(SNPs))
for(i in 1:dim(SNPs)[1]) {
SNPs[i,] <- as.numeric(SNPs[i,])
}
Phenos <- read.csv("data/BcAtGWAS/03_bigRRinput/At_Pheno_bigRR.csv", row.names = 1)
#note: in data frame replaced one NA (npr1.Cam, 01.02.02) with 7.91 (average for npr1)
#remove duplicate row 77 (KGB1 duplicate)
Phenos <- Phenos[-77,]
#add constant to remove negative values
Phenos$Col0.Cam <- Phenos$Col0.Cam + 9
Phenos$anac055.Cam <- Phenos$anac055.Cam + 4
Phenos$coi1.Cam <- Phenos$coi1.Cam + 2
Phenos$tga3.Cam <- Phenos$tga3.Cam + 3
#try standardizing Lesion Size Data (large values ~ 1000s)
Phenos$Col0.Les.s <- (Phenos$Col0.Les - mean(Phenos$Col0.Les))/sd(Phenos$Col0.Les) + 2
Phenos$anac055.Les.s <- (Phenos$anac055.Les - mean(Phenos$anac055.Les))/sd(Phenos$anac055.Les) +3
Phenos$coi1.Les.s <- (Phenos$coi1.Les - mean(Phenos$coi1.Les))/sd(Phenos$coi1.Les) +3
Phenos$npr1.Les.s <- (Phenos$npr1.Les - mean(Phenos$npr1.Les))/sd(Phenos$npr1.Les) +3
Phenos$pad3.Les.s <- (Phenos$pad3.Les - mean(Phenos$pad3.Les))/sd(Phenos$pad3.Les) +3
Phenos$tga3.Les.s <- (Phenos$tga3.Les - mean(Phenos$tga3.Les))/sd(Phenos$coi1.Les) +2
#only keep columns with standardized phenotypes
attach(Phenos)
Phenos <- Phenos[,c("Rename","Col0.Cam","Col0.Les.s","Col0.AT3G26830","Col0.AT2G30770" ,"Col.0AT4G30530","anac055.Cam","anac055.Les.s","coi1.Cam","coi1.Les.s","npr1.Cam","npr1.Les.s","tga3.Cam","tga3.Les.s")]
#troubleshoot: try removing X1.02.19 since it wasn't used in tomato GWAS
#Phenos <- Phenos[-16,]
#tried skipping first few phenos (6:14)
#complete is: 2:14
#error without permutations for "Col0.AT2G30770" (5)
dat <- as.data.frame((Phenos[,c(2:4,6:14)]))  #INSERT PHENOTYPE COLUMNS HERE
write.csv(dat, "mydata.csv")
dat <- read.csv("mydata.csv")
dat <- dat[,-1]
outpt.BLUP <- colnames(SNPs)
outpt.HEM <- colnames(SNPs)
thresh.BLUP <- list("0.95Thresh" = NA, "0.975Thresh" = NA, "0.99Thresh" = NA, "0.999Thresh" = NA)
thresh.HEM <- list("0.95Thresh" = NA, "0.975Thresh" = NA, "0.99Thresh" = NA, "0.999Thresh" = NA)
#Calculate BLUP and HEMs for all phenotypes
Sys.time()
#should be for (i in 1:dim(dat)[2])  but only trying with 1:3
for(i in 1:dim(dat)[2]) { #i will be each plant genotype
print(colnames(dat)[i])
MyX <- matrix(1, dim(dat)[1], 1)
Pheno.BLUP.result <- bigRR(y = dat[,i], X = MyX, Z = SNPs, GPU = TRUE)
Pheno.HEM.result <- bigRR_update(Pheno.BLUP.result, SNPs)
##outpt.BLUP <- cbind(outpt.BLUP, Pheno.BLUP.result$u)
outpt.HEM <- cbind(outpt.HEM, Pheno.HEM.result$u)
#   #Permute Thresholds for Phenos - this is what takes forever
#   ## troubleshoot: it's breaking here
#   ##perm.u.BLUP <- vector()
#   perm.u.HEM <- vector()
#   #should be p in 1:1000
#   for(p in 1:3) {
#     if(p %% 10 == 0) {print(paste("Thresh sample:", p, "--", Sys.time()))}
#     temp.Pheno <- sample(dat[,i], length(dat[,i]), replace = FALSE) ## skip to troubleshoot
#     print(try(temp.BLUP  <- bigRR(y = temp.Pheno, X = MyX, Z = SNPs, GPU = TRUE),silent = TRUE))
#     #works up to here with 3 i's and 3 p's
#     try(temp.HEM <- bigRR_update(temp.BLUP, SNPs)) #REF change- was bigRR_update(Pheno.BLUP.result...
#     ##perm.u.BLUP <- c(perm.u.BLUP, temp.BLUP$u) #REF change- ...c(perm.u.HEM...)
#     perm.u.HEM <- c(perm.u.HEM, temp.HEM$u)
#
#   }
#   #write.csv(perm.u.HEM, paste("PermEffects_",colnames(dat)[i],".csv",sep=""))
#   ##thresh.BLUP$"0.95Thresh"[i] <- quantile(perm.u.BLUP,0.95)
#   ##thresh.BLUP$"0.975Thresh"[i] <- quantile(perm.u.BLUP,0.975)
#   ##thresh.BLUP$"0.99Thresh"[i] <- quantile(perm.u.BLUP,0.99)
#   ##thresh.BLUP$"0.999Thresh"[i] <- quantile(perm.u.BLUP,0.999)
#   thresh.HEM$"0.95Thresh"[i] <- quantile(abs(perm.u.HEM),0.95)
#   thresh.HEM$"0.975Thresh"[i] <- quantile(abs(perm.u.HEM),0.975)
#   thresh.HEM$"0.99Thresh"[i] <- quantile(abs(perm.u.HEM),0.99)
#   thresh.HEM$"0.999Thresh"[i] <- quantile(abs(perm.u.HEM),0.999)
#   ##colnames(outpt.BLUP)[i+1] <- paste(colnames(dat)[i],"BLUP",sep=".")
#   colnames(outpt.HEM)[i+1] <- paste(colnames(dat)[i],"HEM",sep=".")
# }
#
# #Give column names to the thresholds from the HEM list
# for(j in 1:length(thresh.HEM)) {
#   names(thresh.HEM[[j]]) <- colnames(dat)
}
#
# #RF-give row names to thresh.HEM and thresh.BLUP so that threshhold values will line up correctly with phenotypes, and you can see which threshold value is displayed
# ##thresh.BLUP$"0.95Thresh" <- c("0.95 Thresh", thresh.BLUP$"0.95Thresh")
# ##thresh.BLUP$"0.975Thresh" <- c("0.975 Thresh", thresh.BLUP$"0.975Thresh")
# ##thresh.BLUP$"0.99Thresh" <- c("0.99 Thresh", thresh.BLUP$"0.99Thresh")
# ##thresh.BLUP$"0.999Thresh" <- c("0.999 Thresh", thresh.BLUP$"0.999Thresh")
# thresh.HEM$"0.95Thresh" <- c("0.95 Thresh", thresh.HEM$"0.95Thresh")
# thresh.HEM$"0.975Thresh" <- c("0.975 Thresh", thresh.HEM$"0.975Thresh")
# thresh.HEM$"0.99Thresh" <- c("0.99 Thresh", thresh.HEM$"0.99Thresh")
# thresh.HEM$"0.999Thresh" <- c("0.999 Thresh", thresh.HEM$"0.999Thresh")
# #Write results to output
# ##write.csv(rbind(thresh.BLUP$"0.95Thresh",thresh.BLUP$"0.975Thresh",thresh.BLUP$"0.99Thresh",thresh.BLUP$"0.999Thresh",outpt.BLUP),"AthalianaLesion.BLUP.csv")
# write.csv(rbind(thresh.HEM$"0.95Thresh",thresh.HEM$"0.975Thresh",thresh.HEM$"0.99Thresh",thresh.HEM$"0.999Thresh",outpt.HEM),"data/BcAtGWAS/04_bigRRoutput/Troubleshoot/AthalianaLesion.HEM.csv")
# Sys.time()
write.csv(outpt.HEM,"data/BcAtGWAS/04_bigRRoutput/Troubleshoot/AthalianaLesion.HEM.csv")
Sys.time()
dat <- as.data.frame((Phenos[,c(2:4,6:14)]))  #INSERT PHENOTYPE COLUMNS HERE
write.csv(dat, "mydata.csv")
dat <- read.csv("mydata.csv")
dat <- dat[,-1]
outpt.BLUP <- colnames(SNPs)
outpt.HEM <- colnames(SNPs)
thresh.BLUP <- list("0.95Thresh" = NA, "0.975Thresh" = NA, "0.99Thresh" = NA, "0.999Thresh" = NA)
thresh.HEM <- list("0.95Thresh" = NA, "0.975Thresh" = NA, "0.99Thresh" = NA, "0.999Thresh" = NA)
#Calculate BLUP and HEMs for all phenotypes
Sys.time()
#should be for (i in 1:dim(dat)[2])  but only trying with 1:3
for(i in 1:dim(dat)[2]) { #i will be each plant genotype
print(colnames(dat)[i])
MyX <- matrix(1, dim(dat)[1], 1)
Pheno.BLUP.result <- bigRR(y = dat[,i], X = MyX, Z = SNPs, GPU = TRUE)
Pheno.HEM.result <- bigRR_update(Pheno.BLUP.result, SNPs)
##outpt.BLUP <- cbind(outpt.BLUP, Pheno.BLUP.result$u)
outpt.HEM <- cbind(outpt.HEM, Pheno.HEM.result$u)
#Permute Thresholds for Phenos - this is what takes forever
## troubleshoot: it's breaking here
##perm.u.BLUP <- vector()
perm.u.HEM <- vector()
#should be p in 1:1000
for(p in 1:3) {
if(p %% 10 == 0) {print(paste("Thresh sample:", p, "--", Sys.time()))}
temp.Pheno <- sample(dat[,i], length(dat[,i]), replace = FALSE) ## skip to troubleshoot
print(try(temp.BLUP  <- bigRR(y = temp.Pheno, X = MyX, Z = SNPs, GPU = TRUE),silent = TRUE))
#works up to here with 3 i's and 3 p's
try(temp.HEM <- bigRR_update(temp.BLUP, SNPs)) #REF change- was bigRR_update(Pheno.BLUP.result...
##perm.u.BLUP <- c(perm.u.BLUP, temp.BLUP$u) #REF change- ...c(perm.u.HEM...)
perm.u.HEM <- c(perm.u.HEM, temp.HEM$u)
}
#write.csv(perm.u.HEM, paste("PermEffects_",colnames(dat)[i],".csv",sep=""))
##thresh.BLUP$"0.95Thresh"[i] <- quantile(perm.u.BLUP,0.95)
##thresh.BLUP$"0.975Thresh"[i] <- quantile(perm.u.BLUP,0.975)
##thresh.BLUP$"0.99Thresh"[i] <- quantile(perm.u.BLUP,0.99)
##thresh.BLUP$"0.999Thresh"[i] <- quantile(perm.u.BLUP,0.999)
thresh.HEM$"0.95Thresh"[i] <- quantile(abs(perm.u.HEM),0.95)
thresh.HEM$"0.975Thresh"[i] <- quantile(abs(perm.u.HEM),0.975)
thresh.HEM$"0.99Thresh"[i] <- quantile(abs(perm.u.HEM),0.99)
thresh.HEM$"0.999Thresh"[i] <- quantile(abs(perm.u.HEM),0.999)
##colnames(outpt.BLUP)[i+1] <- paste(colnames(dat)[i],"BLUP",sep=".")
colnames(outpt.HEM)[i+1] <- paste(colnames(dat)[i],"HEM",sep=".")
}
#Give column names to the thresholds from the HEM list
for(j in 1:length(thresh.HEM)) {
names(thresh.HEM[[j]]) <- colnames(dat)
}
#RF-give row names to thresh.HEM and thresh.BLUP so that threshhold values will line up correctly with phenotypes, and you can see which threshold value is displayed
##thresh.BLUP$"0.95Thresh" <- c("0.95 Thresh", thresh.BLUP$"0.95Thresh")
##thresh.BLUP$"0.975Thresh" <- c("0.975 Thresh", thresh.BLUP$"0.975Thresh")
##thresh.BLUP$"0.99Thresh" <- c("0.99 Thresh", thresh.BLUP$"0.99Thresh")
##thresh.BLUP$"0.999Thresh" <- c("0.999 Thresh", thresh.BLUP$"0.999Thresh")
thresh.HEM$"0.95Thresh" <- c("0.95 Thresh", thresh.HEM$"0.95Thresh")
thresh.HEM$"0.975Thresh" <- c("0.975 Thresh", thresh.HEM$"0.975Thresh")
thresh.HEM$"0.99Thresh" <- c("0.99 Thresh", thresh.HEM$"0.99Thresh")
thresh.HEM$"0.999Thresh" <- c("0.999 Thresh", thresh.HEM$"0.999Thresh")
#Write results to output
##write.csv(rbind(thresh.BLUP$"0.95Thresh",thresh.BLUP$"0.975Thresh",thresh.BLUP$"0.99Thresh",thresh.BLUP$"0.999Thresh",outpt.BLUP),"AthalianaLesion.BLUP.csv")
write.csv(rbind(thresh.HEM$"0.95Thresh",thresh.HEM$"0.975Thresh",thresh.HEM$"0.99Thresh",thresh.HEM$"0.999Thresh",outpt.HEM),"data/BcAtGWAS/04_bigRRoutput/Troubleshoot/AthalianaLesion.HEM.csv")
Sys.time()
write.csv(outpt.HEM,"data/BcAtGWAS/04_bigRRoutput/Troubleshoot/AthalianaLesion_2.HEM.csv")
Sys.time()
rm(list=ls())
setwd("~/Documents/GitRepos/BcEudicotGWAS/")
#########################
# This makes the bigRR_update run through the GPU
# You need to do this first to mask the native 'bigRR_update' in the bigRR package
# one alternative to family = gaussian(link = identity) is family = poisson(link = log)
bigRR_update <- function (obj, Z, family = gaussian(link = identity), tol.err = 1e-06,
tol.conv = 1e-08)
{
w <- as.numeric(obj$u^2/(1 - obj$leverage))
w[w < tol.err] <- tol.err
bigRR(y = obj$y, X = obj$X, Z = Z, family = family, weight = w,
tol.err = tol.err, tol.conv = tol.conv, GPU = TRUE )
}
########################
#NOTE1 FROM RACHEL:  we need bigRR1.3-9 to get GPU option
# must download R-Forge version bigRR1.3-9tar.gz and manually install
# https://r-forge.r-project.org/R/?group_id=1301
# install.packages("bigRR", repos="http://R-Forge.R-project.org")
#NOTE2 FROM RACHEL: need package 'gputools' but CRAN version fails to install
# must first install Nvidia's CUDA toolkit -current version is 7.5
# installed from developer.nvidia.com/cuda-downloads
library(bigRR) #check if version is 1.3-9
#Get genotype data
SNPs <- read.csv("data/BcAtGWAS/03_bigRRinput/binSNP_bigRR_MAF20hp.csv", row.names = 1)
FullSNPs <- SNPs
SNPs <- FullSNPs
#add a column with position as chr.base
SNPs$Chr.Base <- do.call(paste, c(SNPs[c("X.CHROM","POS")], sep="."))
#Rachel's attempt------------------=====================================
rownames(SNPs) <- SNPs[,93] #set the new column of chrom.base as rownames - this could maybe be written as: rownames(SNPs) <- SNPs$Chr.Base?
SNPs <- SNPs[,4:92] #take out first three cols (X.CHROM, POS, REF) and new last col (Chr.Base). dim(SNPs) should now be [345485, 91], colnames(SNPs) are all Bc Isolates, rownames(SNPs) are all Chr.Base
#troubleshoot: try removing X1.02.19 because it wasn't in tomato GWAS
#SNPs <- SNPs[,-16]
SNPdf <- SNPs
#Rachel's attempt ----FIN-----============================================
#what does this do?
#loads SNP dataframe as a matrix?
#makes SNP states numeric (also transposes SNP matrix)
SNPs <- as.matrix(t(SNPs))
for(i in 1:dim(SNPs)[1]) {
SNPs[i,] <- as.numeric(SNPs[i,])
}
Phenos <- read.csv("data/BcAtGWAS/03_bigRRinput/At_Pheno_bigRR.csv", row.names = 1)
#note: in data frame replaced one NA (npr1.Cam, 01.02.02) with 7.91 (average for npr1)
#remove duplicate row 77 (KGB1 duplicate)
Phenos <- Phenos[-77,]
#add constant to remove negative values
Phenos$Col0.Cam <- Phenos$Col0.Cam + 9
Phenos$anac055.Cam <- Phenos$anac055.Cam + 4
Phenos$coi1.Cam <- Phenos$coi1.Cam + 2
Phenos$tga3.Cam <- Phenos$tga3.Cam + 3
#try standardizing Lesion Size Data (large values ~ 1000s)
Phenos$Col0.Les.s <- (Phenos$Col0.Les - mean(Phenos$Col0.Les))/sd(Phenos$Col0.Les) + 2
Phenos$anac055.Les.s <- (Phenos$anac055.Les - mean(Phenos$anac055.Les))/sd(Phenos$anac055.Les) +3
Phenos$coi1.Les.s <- (Phenos$coi1.Les - mean(Phenos$coi1.Les))/sd(Phenos$coi1.Les) +3
Phenos$npr1.Les.s <- (Phenos$npr1.Les - mean(Phenos$npr1.Les))/sd(Phenos$npr1.Les) +3
Phenos$pad3.Les.s <- (Phenos$pad3.Les - mean(Phenos$pad3.Les))/sd(Phenos$pad3.Les) +3
Phenos$tga3.Les.s <- (Phenos$tga3.Les - mean(Phenos$tga3.Les))/sd(Phenos$coi1.Les) +2
#only keep columns with standardized phenotypes
attach(Phenos)
Phenos <- Phenos[,c("Rename","Col0.Cam","Col0.Les.s","Col0.AT3G26830","Col0.AT2G30770" ,"Col.0AT4G30530","anac055.Cam","anac055.Les.s","coi1.Cam","coi1.Les.s","npr1.Cam","npr1.Les.s","tga3.Cam","tga3.Les.s")]
#troubleshoot: try removing X1.02.19 since it wasn't used in tomato GWAS
#Phenos <- Phenos[-16,]
#tried skipping first few phenos (6:14)
#complete is: 2:14
#error without permutations for "Col0.AT2G30770" (5)
dat <- as.data.frame((Phenos[,c(2:4,6:14)]))  #INSERT PHENOTYPE COLUMNS HERE
write.csv(dat, "mydata.csv")
dat <- read.csv("mydata.csv")
dat <- dat[,-1]
outpt.BLUP <- colnames(SNPs)
outpt.HEM <- colnames(SNPs)
thresh.BLUP <- list("0.95Thresh" = NA, "0.975Thresh" = NA, "0.99Thresh" = NA, "0.999Thresh" = NA)
thresh.HEM <- list("0.95Thresh" = NA, "0.975Thresh" = NA, "0.99Thresh" = NA, "0.999Thresh" = NA)
#Calculate BLUP and HEMs for all phenotypes
Sys.time()
#should be for (i in 1:dim(dat)[2])  but only trying with 1:3
for(i in 1:dim(dat)[2]) { #i will be each plant genotype
print(colnames(dat)[i])
MyX <- matrix(1, dim(dat)[1], 1)
Pheno.BLUP.result <- bigRR(y = dat[,i], X = MyX, Z = SNPs, GPU = TRUE)
Pheno.HEM.result <- bigRR_update(Pheno.BLUP.result, SNPs)
##outpt.BLUP <- cbind(outpt.BLUP, Pheno.BLUP.result$u)
outpt.HEM <- cbind(outpt.HEM, Pheno.HEM.result$u)
#Permute Thresholds for Phenos - this is what takes forever
## troubleshoot: it's breaking here
##perm.u.BLUP <- vector()
perm.u.HEM <- vector()
#should be p in 1:1000
for(p in 1:1000) {
if(p %% 10 == 0) {print(paste("Thresh sample:", p, "--", Sys.time()))}
temp.Pheno <- sample(dat[,i], length(dat[,i]), replace = FALSE) ## skip to troubleshoot
print(try(temp.BLUP  <- bigRR(y = temp.Pheno, X = MyX, Z = SNPs, GPU = TRUE),silent = TRUE))
#works up to here with 3 i's and 3 p's
try(temp.HEM <- bigRR_update(temp.BLUP, SNPs)) #REF change- was bigRR_update(Pheno.BLUP.result...
##perm.u.BLUP <- c(perm.u.BLUP, temp.BLUP$u) #REF change- ...c(perm.u.HEM...)
perm.u.HEM <- c(perm.u.HEM, temp.HEM$u)
}
#write.csv(perm.u.HEM, paste("PermEffects_",colnames(dat)[i],".csv",sep=""))
##thresh.BLUP$"0.95Thresh"[i] <- quantile(perm.u.BLUP,0.95)
##thresh.BLUP$"0.975Thresh"[i] <- quantile(perm.u.BLUP,0.975)
##thresh.BLUP$"0.99Thresh"[i] <- quantile(perm.u.BLUP,0.99)
##thresh.BLUP$"0.999Thresh"[i] <- quantile(perm.u.BLUP,0.999)
thresh.HEM$"0.95Thresh"[i] <- quantile(abs(perm.u.HEM),0.95)
thresh.HEM$"0.975Thresh"[i] <- quantile(abs(perm.u.HEM),0.975)
thresh.HEM$"0.99Thresh"[i] <- quantile(abs(perm.u.HEM),0.99)
thresh.HEM$"0.999Thresh"[i] <- quantile(abs(perm.u.HEM),0.999)
##colnames(outpt.BLUP)[i+1] <- paste(colnames(dat)[i],"BLUP",sep=".")
colnames(outpt.HEM)[i+1] <- paste(colnames(dat)[i],"HEM",sep=".")
}
#Give column names to the thresholds from the HEM list
for(j in 1:length(thresh.HEM)) {
names(thresh.HEM[[j]]) <- colnames(dat)
}
#RF-give row names to thresh.HEM and thresh.BLUP so that threshhold values will line up correctly with phenotypes, and you can see which threshold value is displayed
##thresh.BLUP$"0.95Thresh" <- c("0.95 Thresh", thresh.BLUP$"0.95Thresh")
##thresh.BLUP$"0.975Thresh" <- c("0.975 Thresh", thresh.BLUP$"0.975Thresh")
##thresh.BLUP$"0.99Thresh" <- c("0.99 Thresh", thresh.BLUP$"0.99Thresh")
##thresh.BLUP$"0.999Thresh" <- c("0.999 Thresh", thresh.BLUP$"0.999Thresh")
thresh.HEM$"0.95Thresh" <- c("0.95 Thresh", thresh.HEM$"0.95Thresh")
thresh.HEM$"0.975Thresh" <- c("0.975 Thresh", thresh.HEM$"0.975Thresh")
thresh.HEM$"0.99Thresh" <- c("0.99 Thresh", thresh.HEM$"0.99Thresh")
thresh.HEM$"0.999Thresh" <- c("0.999 Thresh", thresh.HEM$"0.999Thresh")
#Write results to output
##write.csv(rbind(thresh.BLUP$"0.95Thresh",thresh.BLUP$"0.975Thresh",thresh.BLUP$"0.99Thresh",thresh.BLUP$"0.999Thresh",outpt.BLUP),"AthalianaLesion.BLUP.csv")
write.csv(rbind(thresh.HEM$"0.95Thresh",thresh.HEM$"0.975Thresh",thresh.HEM$"0.99Thresh",thresh.HEM$"0.999Thresh",outpt.HEM),"data/BcAtGWAS/04_bigRRoutput/AthalianaLesion.HEM.csv")
Sys.time()
getwd()
View(outpt.HEM)
thresh.HEM[1]
write.csv(rbind(thresh.HEM$"0.95Thresh",thresh.HEM$"0.975Thresh",thresh.HEM$"0.99Thresh",thresh.HEM$"0.999Thresh",outpt.HEM),"data/BcAtGWAS/04_bigRRoutput/AthalianaLesion.0523.HEM.csv")))
write.csv(rbind(thresh.HEM$"0.95Thresh",thresh.HEM$"0.975Thresh",thresh.HEM$"0.99Thresh",thresh.HEM$"0.999Thresh",outpt.HEM),"data/BcAtGWAS/04_bigRRoutput/AthalianaLesion.0523.HEM.csv"))
write.csv(rbind(thresh.HEM$"0.95Thresh",thresh.HEM$"0.975Thresh",thresh.HEM$"0.99Thresh",thresh.HEM$"0.999Thresh",outpt.HEM),"data/BcAtGWAS/04_bigRRoutput/AthalianaLesion.0523.HEM.csv")
=======
qplot(Index,abs(coi1.Cam), data=HEM.plotdata, ylab="SNP Effect Estimate" ,
main = "coi1.Cam", colour=factor(Chrom)) +
geom_hline(yintercept=TH99_coi1.Cam) +
geom_text(aes(0,TH99_coi1.Cam, label = ".99 Threshold", vjust = 1.5, hjust = .05), col = "black") +
geom_hline(yintercept=TH95_coi1.Cam, colour = "blue") +
geom_text(aes(0,TH95_coi1.Cam, label = ".95 Threshold", vjust = 1.5, hjust = .05), col = "blue")
dev.off()
qplot(Index,abs(coi1.Les.s), data=HEM.plotdata, ylab="SNP Effect Estimate" ,
main = "coi1.Les.s", colour=factor(Chrom)) +
geom_hline(yintercept=TH99_coi1.Les.s) +
geom_text(aes(0,TH99_coi1.Les.s, label = ".99 Threshold", vjust = 1.5, hjust = .05), col = "black")
jpeg("plots/BcAtGWAS/coi1.Les.ManhattanPlot.jpg")
qplot(Index,abs(coi1.Les.s), data=HEM.plotdata, ylab="SNP Effect Estimate" ,
main = "coi1.Les.s", colour=factor(Chrom)) +
geom_hline(yintercept=TH99_coi1.Les.s) +
geom_text(aes(0,TH99_coi1.Les.s, label = ".99 Threshold", vjust = 1.5, hjust = .05), col = "black") +
geom_hline(yintercept=TH95_coi1.Les.s, colour = "blue") +
geom_text(aes(0,TH95_coi1.Les.s, label = ".95 Threshold", vjust = 1.5, hjust = .05), col = "blue")
dev.off()
qplot(Index,abs(npr1.Cam), data=HEM.plotdata, ylab="SNP Effect Estimate" ,
main = "npr1.Cam", colour=factor(Chrom)) +
geom_hline(yintercept=TH99_npr1.Cam) +
geom_text(aes(0,TH99_npr1.Cam, label = ".99 Threshold", vjust = 1.5, hjust = .05), col = "black")
jpeg("plots/BcAtGWAS/npr1.Cam.ManhattanPlot.jpg")
qplot(Index,abs(npr1.Cam), data=HEM.plotdata, ylab="SNP Effect Estimate" ,
main = "npr1.Cam", colour=factor(Chrom)) +
geom_hline(yintercept=TH99_npr1.Cam) +
geom_text(aes(0,TH99_npr1.Cam, label = ".99 Threshold", vjust = 1.5, hjust = .05), col = "black") +
geom_hline(yintercept=TH95_npr1.Cam, colour = "blue") +
geom_text(aes(0,TH95_npr1.Cam, label = ".95 Threshold", vjust = 1.5, hjust = .05), col = "blue")
dev.off()
qplot(Index,abs(npr1.Les.s), data=HEM.plotdata, ylab="SNP Effect Estimate" ,
main = "npr1.Les.s", colour=factor(Chrom)) +
geom_hline(yintercept=TH99_npr1.Les.s) +
geom_text(aes(0,TH99_npr1.Les.s, label = ".99 Threshold", vjust = 1.5, hjust = .05), col = "black")
jpeg("plots/BcAtGWAS/npr1.Les.s.ManhattanPlot.jpg")
qplot(Index,abs(npr1.Les.s), data=HEM.plotdata, ylab="SNP Effect Estimate" ,
main = "npr1.Les.s", colour=factor(Chrom)) +
geom_hline(yintercept=TH999_npr1.Les.s) +
geom_text(aes(0,TH999_npr1.Les.s, label = ".999 Threshold", vjust = 1.5, hjust = .05), col = "black")
#+
#  geom_hline(yintercept=TH95_npr1.Les.s, colour = "blue") +
#  geom_text(aes(0,TH95_npr1.Les.s, label = ".95 Threshold", vjust = 1.5, hjust = .05), col = "blue")
dev.off()
qplot(Index,abs(tga3.Cam), data=HEM.plotdata, ylab="SNP Effect Estimate" ,
main = "tga3.Cam", colour=factor(Chrom)) +
geom_hline(yintercept=TH999_tga3.Cam) +
geom_text(aes(0,TH999_tga3.Cam, label = ".999 Threshold", vjust = 1.5, hjust = .05), col = "black")
jpeg("plots/BcAtGWAS/tga3.Cam.ManhattanPlot.jpg")
qplot(Index,abs(tga3.Cam), data=HEM.plotdata, ylab="SNP Effect Estimate" ,
main = "tga3.Cam", colour=factor(Chrom)) +
geom_hline(yintercept=TH999_tga3.Cam) +
geom_text(aes(0,TH999_tga3.Cam, label = ".999 Threshold", vjust = 1.5, hjust = .05), col = "black")
#+
#  geom_hline(yintercept=TH95_tga3.Cam, colour = "blue") +
#  geom_text(aes(0,TH95_tga3.Cam, label = ".95 Threshold", vjust = 1.5, hjust = .05), col = "blue")
dev.off()
qplot(Index,abs(tga3.Les.s), data=HEM.plotdata, ylab="SNP Effect Estimate" ,
main = "tga3.Les.s", colour=factor(Chrom)) +
geom_hline(yintercept=TH999_tga3.Les.s) +
geom_text(aes(0,TH999_tga3.Les.s, label = ".999 Threshold", vjust = 1.5, hjust = .05), col = "black")
jpeg("plots/BcAtGWAS/tga3.Les.s.ManhattanPlot.jpg")
qplot(Index,abs(tga3.Les.s), data=HEM.plotdata, ylab="SNP Effect Estimate" ,
main = "tga3.Les.s", colour=factor(Chrom)) +
geom_hline(yintercept=TH999_tga3.Les.s) +
geom_text(aes(0,TH999_tga3.Les.s, label = ".999 Threshold", vjust = 1.5, hjust = .05), col = "black")
#+
#  geom_hline(yintercept=TH95_tga3.Cam, colour = "blue") +
#  geom_text(aes(0,TH95_tga3.Cam, label = ".95 Threshold", vjust = 1.5, hjust = .05), col = "blue")
dev.off()
rm(list=ls())
setwd("~/Projects/BcEudicotGWAS")
library(ggplot2)
library(grid)
HEM.plotdata <- read.csv("data/BcAtGWAS/04_bigRRoutput/At_phenos.HEM.PlotFormat.csv")
rm(list=ls())
setwd("~/Projects/BcEudicotGWAS/data/MetaAnalysis")
#-------------------------------------------------------------
#load data
ModDat <- read.csv("CeMetaDat.csv")
names(ModDat)
CeSumm <- as.data.frame(with(ModDat, table(IsolateID,Rep)))
#missing Exps: 94.1 (1), UKRazz (1), 01.04.15 (2), Gallo1 (2)
OgDat <- ModDat
ModDat <- subset(ModDat, IsolateID != c("94.1", "UKRazz", "01.04.15", "Gallo1"))
#run the model
library(lme4); library(car); library(lmerTest)
Sys.time()
sink(file='CeFullMod_060416.txt')
print("fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat) + (1|Domest/PlantGeno/IndPlant), data = ModDat)")
Sys.time()
#rand(fullmod)
Anova(fullmod, type=2)
#anova(fullmod)
Sys.time()
sink()
Sys.time()
fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat) + (1|Domest/PlantGeno/IndPlant), data = ModDat)
Sys.time()
sink(file='CeFullMod_060416.txt')
print("fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat) + (1|Domest/PlantGeno/IndPlant), data = ModDat)")
Sys.time()
#rand(fullmod)
Anova(fullmod, type=2)
#anova(fullmod)
Sys.time()
sink()
Sys.time()
fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat), data = ModDat)
Sys.time()
sink(file='CeFullMod_060416.txt')
print("fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat), data = ModDat)")
Sys.time()
#rand(fullmod)
Anova(fullmod, type=2)
#anova(fullmod)
Sys.time()
sink()
Sys.time()
fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Domest/PlantGeno/IndPlant), data = ModDat)
Sys.time()
sink(file='CeFullMod_060416b.txt')
print("fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Domest/PlantGeno/IndPlant), data = ModDat)")
Sys.time()
#rand(fullmod)
Anova(fullmod, type=2)
#anova(fullmod)
Sys.time()
sink()
getwd()
Sys.time()
sink(file='CeFullMod_060416.txt')
print("fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat), data = ModDat)")
Sys.time()
rand(fullmod)
Anova(fullmod, type=2)
anova(fullmod)
Sys.time()
sink()
getwd()
#-------------------------------------------------------------
rm(list=ls())
setwd("~/Projects/BcEudicotGWAS/data/MetaAnalysis")
setwd("~/Documents/GitRepos/BcEudicotGWAS/data")
#-------------------------------------------------------------
#load data
ModDat <- read.csv("BrMetaDat.csv")
names(ModDat)
BrSumm <- as.data.frame(with(ModDat, table(IsolateID,Rep)))
#missing Exps: 01.05.22 (1), 02.04.21 (1), Geranium (2), Navel (2)
OgDat <- ModDat
ModDat <- subset(ModDat, IsolateID != c("01.05.22","02.04.21","Geranium","Navel"))
#run the model
library(lme4); library(car); library(lmerTest)
Sys.time()
fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat) + (1|IndPlant), data = ModDat)
getwd()
Anova(fullmod, type=2)
CiSumm <- as.data.frame(with(ModDat, table(IsolateID,Rep)))
View(CiSumm)
CiSumm <- as.data.frame(with(ModDat, table(IsolateID,Exp)))
ModDat <- subset(ModDat, IsolateID != c("01.05.22","02.04.21","Geranium","Navel"))
rm(list=ls())
setwd("~/Projects/BcEudicotGWAS/data/MetaAnalysis")
#-------------------------------------------------------------
#load data
ModDat <- read.csv("HaMetaDat.csv")
names(ModDat)
library(lme4); library(car); library(lmerTest)
HaSumm <- as.data.frame(with(ModDat, table(IsolateID,Exp)))
rm(list=ls())
setwd("~/Projects/BcEudicotGWAS/data/MetaAnalysis")
#-------------------------------------------------------------
#load data
ModDat <- read.csv("HaMetaDat.csv")
names(ModDat)
HaSumm <- as.data.frame(with(ModDat, table(IsolateID,Exp)))
OgDat <- ModDat
View(HaSumm)
ModDat <- subset(ModDat, IsolateID != c("1.05.04","KGB1"))
OgDat <- ModDat
ModDat <- subset(ModDat, IsolateID != c("1.05.04","KGB1"))
unique(ModDat$IsolateID)
ModDat <- subset(ModDat, IsolateID != c("1.05.04","KGB1"))
ModDat <- subset(ModDat, IsolateID != c("KGB1"))
ModDat <- subset(ModDat, IsolateID != c("1.05.04"))
View(ModDat)
unique(ModDat$IsolateID)
rm(list=ls())
setwd("~/Projects/BcEudicotGWAS/data/MetaAnalysis")
#-------------------------------------------------------------
#load data
ModDat <- read.csv("CiMetaDat.csv")
names(ModDat)
CiSumm <- as.data.frame(with(ModDat, table(IsolateID,Exp)))
#missing Exps: 2.04.21 (1), 1.05.22 (1), Geranium (2), Navel (2)
OgDat <- ModDat
ModDat <- subset(ModDat, IsolateID != c("01.05.22","02.04.21","Geranium","Navel"))
#run the model
library(lme4); library(car); library(lmerTest)
Sys.time()
fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat) + (1|Domest/PlantGeno/IndPlant), data = ModDat)
Sys.time()
sink(file='CiFullMod_060516.txt')
print("fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat) + (1|Domest/PlantGeno/IndPlant), data = ModDat)")
Sys.time()
rand(fullmod)
Anova(fullmod, type=2)
Sys.time()
#removed flat
fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Domest/PlantGeno/IndPlant), data = ModDat)
Sys.time()
sink(file='CiFullMod_060516.txt')
print("fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Domest/PlantGeno/IndPlant), data = ModDat)")
Sys.time()
rand(fullmod)
Anova(fullmod, type=2)
anova(fullmod)
Sys.time()
sink()
Sys.time()
#removed indplant
fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat), data = ModDat)
Sys.time()
sink(file='CiFullMod_060516b.txt')
print("fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat), data = ModDat)")
Sys.time()
rand(fullmod)
Anova(fullmod, type=2)
anova(fullmod)
Sys.time()
sink()
attach(ModDat)
out <- split( ModDat , f = ModDat$PlantGeno)
head(out[[1]]) #100 elements, max. 69 obs per isolate
sink(file="CiLSMeans060616.txt")
for (i in c(1:12)) {
print(unique(out[[i]]$PlantGeno))
#this one works
Lesion.lm <- lmer(Scale.LS ~ IsolateID + (1|Exp) + (1|Exp/Rep), data=out[[i]])
Lesion.lsm <- lsmeans(Lesion.lm, "IsolateID")
print(Lesion.lsm)
}
sink()
sink(file="CiLSMeans060616.txt")
for (i in c(1:12)) {
print(unique(out[[i]]$PlantGeno))
#this one works
Lesion.lm <- lmer(Scale.LS ~ IsolateID + (1|Exp) + (1|IndPlant), data=out[[i]])
Lesion.lsm <- lsmeans(Lesion.lm, "IsolateID")
print(Lesion.lsm)
}
sink()
getwd()
sink(file="output/ModelOutputs/CiLSMeans_060616.txt")
print("Lesion.lm <- lmer(Scale.LS ~ IsolateID + (1|Exp), data=out[[i]])")
for (i in c(1:12)) {
print(unique(out[[i]]$PlantGeno))
#this one works
Lesion.lm <- lmer(Scale.LS ~ IsolateID + (1|Exp), data=out[[i]])
Lesion.lsm <- lsmeans(Lesion.lm, "IsolateID")
print(Lesion.lsm)
}
sink()
rm(list=ls())
setwd("~/Projects/BcEudicotGWAS/data/MetaAnalysis")
setwd("~/Documents/GitRepos/BcEudicotGWAS/data")
#-------------------------------------------------------------
#load data
ModDat <- read.csv("BrMetaDat.csv")
names(ModDat)
BrSumm <- as.data.frame(with(ModDat, table(IsolateID,Rep)))
#missing Exps: 01.05.22 (1), 02.04.21 (1), Geranium (2), Navel (2)
OgDat <- ModDat
ModDat <- subset(ModDat, IsolateID != c("01.05.22","02.04.21","Geranium","Navel"))
#run the model
library(lme4); library(car); library(lmerTest)
getwd()
setwd("~/Projects/BcEudicotGWAS/")
ModDat <- read.csv("data/MetaAnalysis/BrMetaDat.csv")
names(ModDat)
BrSumm <- as.data.frame(with(ModDat, table(IsolateID,Rep)))
#missing Exps: 01.05.22 (1), 02.04.21 (1), Geranium (2), Navel (2)
OgDat <- ModDat
ModDat <- subset(ModDat, IsolateID != c("01.05.22","02.04.21","Geranium","Navel"))
#run the model
library(lme4); library(car); library(lmerTest)
fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat) + (1|Domest/PlantGeno/IndPlant), data = ModDat)
Sys.time()
sink(file='output/ModelOutputs/BrFullMod_060616.txt')
print("fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat) + (1|Domest/PlantGeno/IndPlant), data = ModDat)")
Sys.time()
rand(fullmod)
rm(list=ls())
setwd("~/Projects/BcEudicotGWAS/")
#-------------------------------------------------------------
#load data
ModDat <- read.csv("data/MetaAnalysis/HaMetaDat.csv")
names(ModDat)
HaSumm <- as.data.frame(with(ModDat, table(IsolateID,Exp)))
#missing Exps: 1.05.04 (1), KGB1 (2)
OgDat <- ModDat
#do separately due to error
ModDat <- subset(ModDat, IsolateID != ("1.05.04"))
ModDat <- subset(ModDat, IsolateID != ("KGB1"))
#run the model
library(lme4); library(car); library(lmerTest)
Sys.time()
#working model
fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat) + (1|Domest/PlantGeno/IndPlant), data = ModDat)
Sys.time()
sink(file='output/ModelOutputs/HcFullMod_060716.txt')
print("fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat) + (1|Domest/PlantGeno/IndPlant), data = ModDat)")
Sys.time()
rand(fullmod)
Sys.time()
fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat), data = ModDat)
Sys.time()
sink(file='output/ModelOutputs/HcFullMod_060716a.txt')
print("fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat), data = ModDat)")
Sys.time()
rand(fullmod)
Anova(fullmod, type=2)
anova(fullmod)
Sys.time()
sink()
Sys.time()
fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Domest/PlantGeno/IndPlant), data = ModDat)
Sys.time()
sink(file='output/ModelOutputs/HcFullMod_060716b.txt')
print("fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) +  (1|Domest/PlantGeno/IndPlant), data = ModDat)")
Sys.time()
rand(fullmod)
Anova(fullmod, type=2)
anova(fullmod)
Sys.time()
sink()
rm(list=ls())
setwd("~/Projects/BcEudicotGWAS/")
#-------------------------------------------------------------
#load data
ModDat <- read.csv("data/MetaAnalysis/HaMetaDat.csv")
names(ModDat)
#-------------------------------------------------------------
#check assumptions
#check normality of Scale.LS
require(car)
ModDat$Scale.LS.t <- ModDat$Scale.LS + 1
#not quite normal
qqp(ModDat$Scale.LS.t, "norm")
#---------------------------------------------------------------
#try removing isolates missing from one experiment
HaSumm <- as.data.frame(with(ModDat, table(IsolateID,Exp)))
#missing Exps: 1.05.04 (1), KGB1 (2)
OgDat <- ModDat
#do separately due to error
ModDat <- subset(ModDat, IsolateID != ("1.05.04"))
ModDat <- subset(ModDat, IsolateID != ("KGB1"))
#run the model
library(lme4); library(car); library(lmerTest)
fullmod <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp:IsolateID) + (1|Exp/Domest/PlantGeno), data = ModDat)
fullmod2 <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp:IsolateID) + (1|Exp/Domest/PlantGeno), data = ModDat)
fullmod3 <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp:IsolateID) + (1|Exp/Domest/PlantGeno) + (1|Domest/PlantGeno/IndPlant), data = ModDat)
library(rethinking)
data(rugged)
d <- rugged
d$log_gdp <- log(d$rgdppc_2000)
dd <- d[ complete.cases(d$rgdppc_2000) , ]
#8.3
#old method: fit interaction model
m8.1 <- map(
alist(
log_gdp ~ dnorm( mu , sigma ) ,
mu <- a + bR*rugged + bA*cont_africa + bAR*rugged*cont_africa ,
a ~ dnorm(0,100),
bR ~ dnorm(0,10),
bA ~ dnorm(0,10),
bAR ~ dnorm(0,10),
sigma ~ dunif(0,10)
) ,
data=dd )
precis(m8.1)
dd.trim <- dd[ , c("log_gdp","rugged","cont_africa") ]
str(dd.trim)
require(installr)
updateR()
rm(list=ls())
setwd("~/Projects/BcEudicotGWAS/")
#-------------------------------------------------------------
#load data
ModDat <- read.csv("data/MetaAnalysis/HaMetaDat.csv")
names(ModDat)
#-------------------------------------------------------------
#check assumptions
#check normality of Scale.LS
require(car)
ModDat$Scale.LS.t <- ModDat$Scale.LS + 1
#not quite normal
qqp(ModDat$Scale.LS.t, "norm")
#---------------------------------------------------------------
#try removing isolates missing from one experiment
HaSumm <- as.data.frame(with(ModDat, table(IsolateID,Exp)))
#missing Exps: 1.05.04 (1), KGB1 (2)
OgDat <- ModDat
#do separately due to error
ModDat <- subset(ModDat, IsolateID != ("1.05.04"))
ModDat <- subset(ModDat, IsolateID != ("KGB1"))
#run the model
library(lme4); library(car); library(lmerTest)
fullmod3 <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp:IsolateID) + (1|Exp/Domest/PlantGeno) + (1|Domest/PlantGeno/IndPlant), data = ModDat)
fullmod4 <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat) + (1|Exp:IsolateID) + (1|Exp/Domest/PlantGeno), data = ModDat)
rm(list=ls())
setwd("~/Projects/BcEudicotGWAS/")
#-------------------------------------------------------------
#load data
ModDat <- read.csv("data/MetaAnalysis/HaMetaDat.csv")
names(ModDat)
#-------------------------------------------------------------
#check assumptions
#check normality of Scale.LS
require(car)
ModDat$Scale.LS.t <- ModDat$Scale.LS + 1
#not quite normal
qqp(ModDat$Scale.LS.t, "norm")
#---------------------------------------------------------------
#try removing isolates missing from one experiment
HaSumm <- as.data.frame(with(ModDat, table(IsolateID,Exp)))
#missing Exps: 1.05.04 (1), KGB1 (2)
OgDat <- ModDat
#do separately due to error
ModDat <- subset(ModDat, IsolateID != ("1.05.04"))
ModDat <- subset(ModDat, IsolateID != ("KGB1"))
#run the model
library(lme4); library(car); library(lmerTest)
fullmod4 <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat) + (1|Exp:IsolateID) + (1|Exp/Domest/PlantGeno), data = ModDat)
Sys.time()
sink(file='output/ModelOutputs/HcFullMod_061616.txt')
print("fullmod4 <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) + (1|Exp/Rep) + (1|Exp/Rep/Flat) + (1|Exp:IsolateID) + (1|Exp/Domest/PlantGeno), data = ModDat)")
Sys.time()
rand(fullmod4)
Anova(fullmod4, type=2)
anova(fullmod4)
rm(list=ls())
setwd("~/Projects/BcEudicotGWAS/")
#-------------------------------------------------------------
#load data
ModDat <- read.csv("data/MetaAnalysis/HaMetaDat.csv")
names(ModDat)
#-------------------------------------------------------------
#check assumptions
#check normality of Scale.LS
require(car)
ModDat$Scale.LS.t <- ModDat$Scale.LS + 1
#not quite normal
qqp(ModDat$Scale.LS.t, "norm")
#---------------------------------------------------------------
#try removing isolates missing from one experiment
HaSumm <- as.data.frame(with(ModDat, table(IsolateID,Exp)))
#missing Exps: 1.05.04 (1), KGB1 (2)
OgDat <- ModDat
#do separately due to error
ModDat <- subset(ModDat, IsolateID != ("1.05.04"))
ModDat <- subset(ModDat, IsolateID != ("KGB1"))
#run the model
library(lme4); library(car); library(lmerTest)
fullmod5 <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) +  (1|Exp:IsolateID) + (1|Exp:Domest), data = ModDat)
Sys.time()
sink(file='output/ModelOutputs/HcFullMod_061716.txt')
print("fullmod5 <- lmer(Scale.LS ~ IsolateID + Domest/PlantGeno + IsolateID:Domest/PlantGeno + IsolateID:Domest + (1|Exp) +  (1|Exp:IsolateID) + (1|Exp:Domest), data = ModDat)")
Sys.time()
rand(fullmod5)
Anova(fullmod5, type=2)
anova(fullmod5)
Sys.time()
sink()
rm(list=ls())
setwd("~/Projects/BcEudicotGWAS/")
#-------------------------------------------------------------
#load data
ModDat <- read.csv("data/MetaAnalysis/HaMetaDat.csv")
names(ModDat)
#-------------------------------------------------------------
#check assumptions
#check normality of Scale.LS
require(car)
ModDat$Scale.LS.t <- ModDat$Scale.LS + 1
#not quite normal
qqp(ModDat$Scale.LS.t, "norm")
#---------------------------------------------------------------
#try removing isolates missing from one experiment
HaSumm <- as.data.frame(with(ModDat, table(IsolateID,Exp)))
#missing Exps: 1.05.04 (1), KGB1 (2)
OgDat <- ModDat
#do separately due to error
ModDat <- subset(ModDat, IsolateID != ("1.05.04"))
ModDat <- subset(ModDat, IsolateID != ("KGB1"))
#run the model
library(lme4); library(car); library(lmerTest)
attach(ModDat)
out <- split( ModDat , f = ModDat$PlantGeno)
head(out[[1]]) #100 elements, max. 69 obs per isolate
read.csv("output/ModelOutputs/HaLSMeans_062016.csv")
phenos <- read.csv("output/ModelOutputs/HaLSMeans_062016.csv")
phenos <- phenos[,c("Estimate", "Plant")]
View(phenos)
phenos <- read.csv("output/ModelOutputs/HaLSMeans_062016.csv")
View(phenos)
phenos <- phenos[,c("IsolateID", "Estimate", "Plant")]
library(tidyr)
phenos_w <- spread(phenos, "Plant", "Estimate")
View(phenos_w)
write.csv(phenos_w, "output/ModelOutputs/HaLSM_forbigRR.csv")
>>>>>>> 25b093e17e80db0a31985570d73aa4b59f97f3c1
