#Get genotype data
SNPs <- read.csv("03_bigRRinput/binSNP_bigRR_MAF20hp.OA.csv", row.names = 1)
FullSNPs <- SNPs
SNPs <- FullSNPs
#add a column with position as chr.base
SNPs$Chr.Base <- do.call(paste, c(SNPs[c("X.CHROM","POS")], sep="."))
View(SNPs)
View(SNPs)
rownames(SNPs) <- SNPs[,96] #set the new column of chrom.base as rownames - this could maybe be written as: rownames(SNPs) <- SNPs$Chr.Base?
View(SNPs)
SNPs <- SNPs[,4:95] #take out first three cols (X.CHROM, POS, REF) and new last col (Chr.Base). dim(SNPs) should now be [345485, 91], colnames(SNPs) are all Bc Isolates, rownames(SNPs) are all Chr.Base
SNPs <- as.matrix(t(SNPs))
for(i in 1:dim(SNPs)[1]) {
SNPs[i,] <- as.numeric(SNPs[i,])
}
Phenos <- read.csv("03_bigRRinput/Gm_OA.Pheno_bigRR.csv", row.names = 1)
View(Phenos)
dat <- as.data.frame((Phenos[,2]))  #INSERT PHENOTYPE COLUMNS HERE
outpt.HEM <- colnames(SNPs)
thresh.HEM <- list("0.95Thresh" = NA, "0.975Thresh" = NA, "0.99Thresh" = NA, "0.999Thresh" = NA)
#Calculate HEMs for all phenotypes
for(i in 1:dim(dat)[2]) { #i will be each isolate
print(colnames(dat)[i])
MyX <- matrix(1, dim(dat)[1], 1)
Pheno.BLUP.result <- bigRR(y = dat[,i], X = MyX, Z = SNPs, GPU = TRUE)
Pheno.HEM.result <- bigRR_update(Pheno.BLUP.result, SNPs)
outpt.HEM <- cbind(outpt.HEM, Pheno.HEM.result$u)
#Permute Thresholds for Phenos - this is what takes forever
perm.u.HEM <- vector()
for(p in 1:1000) {
if(p %% 10 == 0) {print(paste("Thresh sample:", p, "--", Sys.time()))}
try(temp.Pheno <- sample(dat[,i], length(dat[,i]), replace = FALSE))
try(temp.BLUP  <- bigRR(y = temp.Pheno, X = MyX, Z = SNPs, GPU = TRUE),silent = TRUE)
temp.HEM <- bigRR_update(temp.BLUP, SNPs) #REF change- was bigRR_update(Pheno.BLUP.result...
perm.u.HEM <- c(perm.u.HEM, temp.HEM$u)
}
#write.csv(perm.u.HEM, paste("PermEffects_",colnames(dat)[i],".csv",sep=""))
thresh.HEM$"0.95Thresh"[i] <- quantile(abs(perm.u.HEM),0.95)
thresh.HEM$"0.975Thresh"[i] <- quantile(abs(perm.u.HEM),0.975)
thresh.HEM$"0.99Thresh"[i] <- quantile(abs(perm.u.HEM),0.99)
thresh.HEM$"0.999Thresh"[i] <- quantile(abs(perm.u.HEM),0.999)
colnames(outpt.HEM)[i+1] <- paste(colnames(dat)[i],"HEM",sep=".")
}
#Give column names to the thresholds from the HEM list
for(j in 1:length(thresh.HEM)) {
names(thresh.HEM[[j]]) <- colnames(dat)
}
#RF-give row names to thresh.HEM and thresh.BLUP so that threshhold values will line up correctly with phenotypes, and you can see which threshold value is displayed
thresh.HEM$"0.95Thresh" <- c("0.95 Thresh", thresh.HEM$"0.95Thresh")
thresh.HEM$"0.975Thresh" <- c("0.975 Thresh", thresh.HEM$"0.975Thresh")
thresh.HEM$"0.99Thresh" <- c("0.99 Thresh", thresh.HEM$"0.99Thresh")
thresh.HEM$"0.999Thresh" <- c("0.999 Thresh", thresh.HEM$"0.999Thresh")
#Write results to output
write.csv(rbind(thresh.HEM$"0.95Thresh",thresh.HEM$"0.975Thresh",thresh.HEM$"0.99Thresh",thresh.HEM$"0.999Thresh",outpt.HEM),"04_bigRRoutput/Gm_OA.Pheno_HEM.csv")
setwd("~/Documents/GitRepos/BcEudicotGWAS/data/RG_soybean/")
SNPs <- read.csv("02_csvprep/Domest/hp_binaryMAF20.csv", row.names = 1)
SNPs_rename <- SNPs
SNPnames <- read.csv("02_csvprep/Domest/Key_SNPnames.csv")
SNPnames <- SNPnames[c(2,4)]
Pheno.D <- read.csv("02_csvprep/Domest/RG_phenoDandW.csv")
names( SNPs_rename ) <- SNPnames[ match( names( SNPs_rename ) , SNPnames[ , 'SNPname' ] ) ,'GenoRename' ]
Pheno.D$REF <- SNPnames[ match( Pheno.D$REF , SNPnames[ , 'SNPname' ] ) ,'GenoRename' ]
View(Pheno.D)
library(plyr)
unique(Pheno.D$REF)
unique(SNPnames$GenoRename)
SNPMt <- as.data.frame(names(SNPs_rename))
PhenoMatch.D <- Pheno.D
PhenoMatch.D <- PhenoMatch.D[PhenoMatch.D$REF%in% SNPMt$"names(SNPs_rename)", ]
View(PhenoMatch.D)
PhenoMt.D <- as.data.frame(PhenoMatch.D[,1])
SNPMatch.D <- SNPs_rename
View(SNPs_rename)
SNPs3 <- SNPs_rename[,c(1:3)]
SNPMatch.D <- SNPMatch.D[names(SNPMatch.D) %in% (PhenoMt.D[,1])]
SNPMatch.D <- SNPMatch.D[ , order(names(SNPMatch.D))]
SNPMatch2.D <- cbind(SNPs3,SNPMatch.D)
PhenoMatch2.D <- PhenoMatch.D[order(PhenoMatch.D$REF),]
View(SNPMatch2.D)
write.csv(SNPMatch2.D, "03_bigRRinput/Domest/binSNP_bigRR_MAF20hp.D.csv")
write.csv(PhenoMatch2.D, "03_bigRRinput/Domest/Gm_Les.Pheno_bigRR.D.csv")
rm(list=ls())
setwd("~/Documents/GitRepos/BcEudicotGWAS/data/RG_soybean/")
bigRR_update <- function (obj, Z, family = gaussian(link = identity), tol.err = 1e-06,
tol.conv = 1e-08)
{
w <- as.numeric(obj$u^2/(1 - obj$leverage))
w[w < tol.err] <- tol.err
bigRR(y = obj$y, X = obj$X, Z = Z, family = family, weight = w,
tol.err = tol.err, tol.conv = tol.conv, GPU = TRUE )
}
library(bigRR) #check if version is 1.3-9
SNPs <- read.csv("03_bigRRinput/Domest/binSNP_bigRR_MAF20hp.D.csv", row.names = 1)
FullSNPs <- SNPs
SNPs <- FullSNPs
SNPs$Chr.Base <- do.call(paste, c(SNPs[c("X.CHROM","POS")], sep="."))
View(SNPs)
rownames(SNPs) <- SNPs[,98] #set the new column of chrom.base as rownames - this could maybe be written as: rownames(SNPs) <- SNPs$Chr.Base?
any(duplicated(SNPs$Chr.Base))#check that none are duplicated
SNPs <- SNPs[,4:97] #take out first three cols (X.CHROM, POS, REF) and new last col (Chr.Base). dim(SNPs) should now be [345485, 91], colnames(SNPs) are all Bc Isolates, rownames(SNPs) are all Chr.Base
SNPs <- as.matrix(t(SNPs))
for(i in 1:dim(SNPs)[1]) {
SNPs[i,] <- as.numeric(SNPs[i,])
}
Phenos <- read.csv("03_bigRRinput/Domest/Gm_Les.Pheno_bigRR.D.csv", row.names = 1)
View(Phenos)
dat <- as.data.frame((Phenos[,2:6]))  #INSERT PHENOTYPE COLUMNS HERE
outpt.HEM <- colnames(SNPs)
thresh.HEM <- list("0.95Thresh" = NA, "0.975Thresh" = NA, "0.99Thresh" = NA, "0.999Thresh" = NA)
for(i in 1:dim(dat)[2]) { #i will be each isolate
print(colnames(dat)[i])
MyX <- matrix(1, dim(dat)[1], 1)
Pheno.BLUP.result <- bigRR(y = dat[,i], X = MyX, Z = SNPs, GPU = TRUE)
Pheno.HEM.result <- bigRR_update(Pheno.BLUP.result, SNPs)
outpt.HEM <- cbind(outpt.HEM, Pheno.HEM.result$u)
#Permute Thresholds for Phenos - this is what takes forever
perm.u.HEM <- vector()
for(p in 1:1000) {
if(p %% 10 == 0) {print(paste("Thresh sample:", p, "--", Sys.time()))}
try(temp.Pheno <- sample(dat[,i], length(dat[,i]), replace = FALSE))
try(temp.BLUP  <- bigRR(y = temp.Pheno, X = MyX, Z = SNPs, GPU = TRUE),silent = TRUE)
temp.HEM <- bigRR_update(temp.BLUP, SNPs) #REF change- was bigRR_update(Pheno.BLUP.result...
perm.u.HEM <- c(perm.u.HEM, temp.HEM$u)
}
#write.csv(perm.u.HEM, paste("PermEffects_",colnames(dat)[i],".csv",sep=""))
thresh.HEM$"0.95Thresh"[i] <- quantile(abs(perm.u.HEM),0.95)
thresh.HEM$"0.975Thresh"[i] <- quantile(abs(perm.u.HEM),0.975)
thresh.HEM$"0.99Thresh"[i] <- quantile(abs(perm.u.HEM),0.99)
thresh.HEM$"0.999Thresh"[i] <- quantile(abs(perm.u.HEM),0.999)
colnames(outpt.HEM)[i+1] <- paste(colnames(dat)[i],"HEM",sep=".")
}
#Give column names to the thresholds from the HEM list
for(j in 1:length(thresh.HEM)) {
names(thresh.HEM[[j]]) <- colnames(dat)
}
#RF-give row names to thresh.HEM and thresh.BLUP so that threshhold values will line up correctly with phenotypes, and you can see which threshold value is displayed
thresh.HEM$"0.95Thresh" <- c("0.95 Thresh", thresh.HEM$"0.95Thresh")
thresh.HEM$"0.975Thresh" <- c("0.975 Thresh", thresh.HEM$"0.975Thresh")
thresh.HEM$"0.99Thresh" <- c("0.99 Thresh", thresh.HEM$"0.99Thresh")
thresh.HEM$"0.999Thresh" <- c("0.999 Thresh", thresh.HEM$"0.999Thresh")
#Write results to output
write.csv(rbind(thresh.HEM$"0.95Thresh",thresh.HEM$"0.975Thresh",thresh.HEM$"0.99Thresh",thresh.HEM$"0.999Thresh",outpt.HEM),"04_bigRRoutput/Domest/Gm_Les.Pheno_HEM.D.csv")
View(FullSNPs)
rm(list=ls())
setwd("~/Documents/GitRepos/BcEudicotGWAS/data/RG_soybean/")
SNPs <- read.csv("02_csvprep/Domest/hp_binaryMAF20.csv", row.names = 1)
SNPs_rename <- SNPs
SNPnames <- read.csv("02_csvprep/Domest/Key_SNPnames.csv")
SNPnames <- SNPnames[c(2,4)]
#read in model data with 2 trays dropped
Pheno.D <- read.csv("02_csvprep/Domest/RG_phenoDandW.csv")
#change names from genotype file to isolate names
#File SNPs_rename has columns of isolate genotypes that I want to rename
#File SNPnames is a list indexing original names to match (SNPname), and actual name to replace it (GenoRename)
names( SNPs_rename ) <- SNPnames[ match( names( SNPs_rename ) , SNPnames[ , 'SNPname' ] ) ,'GenoRename' ]
#change names from phenotype file to isolate names
Pheno.D$REF <- SNPnames[ match( Pheno.D$REF , SNPnames[ , 'SNPname' ] ) ,'GenoRename' ]
library(plyr)
unique(Pheno.D$REF)
unique(SNPnames$GenoRename)
## now only keep genotypes and phenotypes that match
#save practice file
#miniSNPs <- SNPs_rename[c(1:3),]
#write.csv(miniSNPs, "miniSNP_practice.csv")
#only keep phenotype rows that match SNP names
SNPMt <- as.data.frame(names(SNPs_rename))
PhenoMatch.D <- Pheno.D
PhenoMatch.D <- PhenoMatch.D[PhenoMatch.D$REF%in% SNPMt$"names(SNPs_rename)", ]
#only keep SNP rows that match phenotype names
#select column with isolate names
PhenoMt.D <- as.data.frame(PhenoMatch.D[,1])
SNPMatch.D <- SNPs_rename
#save first 3 columns: won't match Pheno names
SNPs3 <- SNPs_rename[,c(1:3)]
SNPMatch.D <- SNPMatch.D[names(SNPMatch.D) %in% (PhenoMt.D[,1])]
SNPMatch.D <- SNPMatch.D[ , order(names(SNPMatch.D))]
SNPMatch2.D <- cbind(SNPs3,SNPMatch.D)
#sort pheno match
PhenoMatch2.D <- PhenoMatch.D[order(PhenoMatch.D$REF),]
View(SNPMatch2.D)
SNPMatch2.D <- SNPMatch2.D[,-9]
View(SNPMatch2.D)
write.csv(SNPMatch2.D, "03_bigRRinput/Domest/binSNP_bigRR_MAF20hp.D.csv")
rm(list=ls())
setwd("~/Documents/GitRepos/BcEudicotGWAS/data/RG_soybean/")
#########################
# This makes the bigRR_update run through the GPU
# You need to do this first to mask the native 'bigRR_update' in the bigRR package
# one alternative to family = gaussian(link = identity) is family = poisson(link = log)
## RAN first time WITH POISSON. Lesion size expected to be Gaussian
bigRR_update <- function (obj, Z, family = gaussian(link = identity), tol.err = 1e-06,
tol.conv = 1e-08)
{
w <- as.numeric(obj$u^2/(1 - obj$leverage))
w[w < tol.err] <- tol.err
bigRR(y = obj$y, X = obj$X, Z = Z, family = family, weight = w,
tol.err = tol.err, tol.conv = tol.conv, GPU = TRUE )
}
########################
#NOTE1 FROM RACHEL:  we need bigRR1.3-9 to get GPU option
# must download R-Forge version bigRR1.3-9tar.gz and manually install
# https://r-forge.r-project.org/R/?group_id=1301
# install.packages("bigRR", repos="http://R-Forge.R-project.org")
#NOTE2 FROM RACHEL: need package 'gputools' but CRAN version fails to install
# must first install Nvidia's CUDA toolkit -current version is 7.5
# installed from developer.nvidia.com/cuda-downloads
library(bigRR) #check if version is 1.3-9
#Get genotype data
SNPs <- read.csv("03_bigRRinput/Domest/binSNP_bigRR_MAF20hp.D.csv", row.names = 1)
FullSNPs <- SNPs
SNPs <- FullSNPs
#add a column with position as chr.base
SNPs$Chr.Base <- do.call(paste, c(SNPs[c("X.CHROM","POS")], sep="."))
rownames(SNPs) <- SNPs[,98] #set the new column of chrom.base as rownames - this could maybe be written as: rownames(SNPs) <- SNPs$Chr.Base?
any(duplicated(SNPs$Chr.Base))#check that none are duplicated
SNPs <- SNPs[,4:97] #take out first three cols (X.CHROM, POS, REF) and new last col (Chr.Base). dim(SNPs) should now be [345485, 91], colnames(SNPs) are all Bc Isolates, rownames(SNPs) are all Chr.Base
#makes SNP states numeric (also transposes SNP matrix)
SNPs <- as.matrix(t(SNPs))
for(i in 1:dim(SNPs)[1]) {
SNPs[i,] <- as.numeric(SNPs[i,])
}
#read in phenotype data
Phenos <- read.csv("03_bigRRinput/Domest/Gm_Les.Pheno_bigRR.D.csv", row.names = 1)
View(Phenos)
#Nicole E Soltis
#match Bc isolates from genotype data to Bc isolates in Gm phenotype data
#-----------------------------------------------------------
rm(list=ls())
setwd("~/Documents/GitRepos/BcEudicotGWAS/data/RG_soybean/")
SNPs <- read.csv("02_csvprep/Domest/hp_binaryMAF20.csv", row.names = 1)
SNPs_rename <- SNPs
SNPnames <- read.csv("02_csvprep/Domest/Key_SNPnames.csv")
SNPnames <- SNPnames[c(2,4)]
#read in model data with 2 trays dropped
Pheno.D <- read.csv("02_csvprep/Domest/RG_phenoDandW.csv")
#change names from genotype file to isolate names
#File SNPs_rename has columns of isolate genotypes that I want to rename
#File SNPnames is a list indexing original names to match (SNPname), and actual name to replace it (GenoRename)
names( SNPs_rename ) <- SNPnames[ match( names( SNPs_rename ) , SNPnames[ , 'SNPname' ] ) ,'GenoRename' ]
#change names from phenotype file to isolate names
Pheno.D$REF <- SNPnames[ match( Pheno.D$REF , SNPnames[ , 'SNPname' ] ) ,'GenoRename' ]
library(plyr)
unique(Pheno.D$REF)
unique(SNPnames$GenoRename)
## now only keep genotypes and phenotypes that match
#save practice file
#miniSNPs <- SNPs_rename[c(1:3),]
#write.csv(miniSNPs, "miniSNP_practice.csv")
#only keep phenotype rows that match SNP names
SNPMt <- as.data.frame(names(SNPs_rename))
PhenoMatch.D <- Pheno.D
PhenoMatch.D <- PhenoMatch.D[PhenoMatch.D$REF%in% SNPMt$"names(SNPs_rename)", ]
#only keep SNP rows that match phenotype names
#select column with isolate names
PhenoMt.D <- as.data.frame(PhenoMatch.D[,1])
SNPMatch.D <- SNPs_rename
#save first 3 columns: won't match Pheno names
SNPs3 <- SNPs_rename[,c(1:3)]
SNPMatch.D <- SNPMatch.D[names(SNPMatch.D) %in% (PhenoMt.D[,1])]
SNPMatch.D <- SNPMatch.D[ , order(names(SNPMatch.D))]
SNPMatch2.D <- cbind(SNPs3,SNPMatch.D)
#remove 01.01.06 duplicate
SNPMatch2.D <- SNPMatch2.D[,-9]
#sort pheno match
PhenoMatch2.D <- PhenoMatch.D[order(PhenoMatch.D$REF),]
#remove 01.01.06 duplicate
View(PhenoMatch2.D)
PhenoMatch2.D <- PhenoMatch2.D[-6,]
write.csv(SNPMatch2.D, "03_bigRRinput/Domest/binSNP_bigRR_MAF20hp.D.csv")
write.csv(PhenoMatch2.D, "03_bigRRinput/Domest/Gm_Les.Pheno_bigRR.D.csv")
rm(list=ls())
setwd("~/Documents/GitRepos/BcEudicotGWAS/data/RG_soybean/")
#########################
# This makes the bigRR_update run through the GPU
# You need to do this first to mask the native 'bigRR_update' in the bigRR package
# one alternative to family = gaussian(link = identity) is family = poisson(link = log)
## RAN first time WITH POISSON. Lesion size expected to be Gaussian
bigRR_update <- function (obj, Z, family = gaussian(link = identity), tol.err = 1e-06,
tol.conv = 1e-08)
{
w <- as.numeric(obj$u^2/(1 - obj$leverage))
w[w < tol.err] <- tol.err
bigRR(y = obj$y, X = obj$X, Z = Z, family = family, weight = w,
tol.err = tol.err, tol.conv = tol.conv, GPU = TRUE )
}
########################
#NOTE1 FROM RACHEL:  we need bigRR1.3-9 to get GPU option
# must download R-Forge version bigRR1.3-9tar.gz and manually install
# https://r-forge.r-project.org/R/?group_id=1301
# install.packages("bigRR", repos="http://R-Forge.R-project.org")
#NOTE2 FROM RACHEL: need package 'gputools' but CRAN version fails to install
# must first install Nvidia's CUDA toolkit -current version is 7.5
# installed from developer.nvidia.com/cuda-downloads
library(bigRR) #check if version is 1.3-9
#Get genotype data
SNPs <- read.csv("03_bigRRinput/Domest/binSNP_bigRR_MAF20hp.D.csv", row.names = 1)
FullSNPs <- SNPs
SNPs <- FullSNPs
#add a column with position as chr.base
SNPs$Chr.Base <- do.call(paste, c(SNPs[c("X.CHROM","POS")], sep="."))
rownames(SNPs) <- SNPs[,98] #set the new column of chrom.base as rownames - this could maybe be written as: rownames(SNPs) <- SNPs$Chr.Base?
any(duplicated(SNPs$Chr.Base))#check that none are duplicated
SNPs <- SNPs[,4:97] #take out first three cols (X.CHROM, POS, REF) and new last col (Chr.Base). dim(SNPs) should now be [345485, 91], colnames(SNPs) are all Bc Isolates, rownames(SNPs) are all Chr.Base
#makes SNP states numeric (also transposes SNP matrix)
SNPs <- as.matrix(t(SNPs))
for(i in 1:dim(SNPs)[1]) {
SNPs[i,] <- as.numeric(SNPs[i,])
}
#read in phenotype data
Phenos <- read.csv("03_bigRRinput/Domest/Gm_Les.Pheno_bigRR.D.csv", row.names = 1)
View(FullSNPs)
dat <- as.data.frame((Phenos[,2:6]))  #INSERT PHENOTYPE COLUMNS HERE
outpt.HEM <- colnames(SNPs)
thresh.HEM <- list("0.95Thresh" = NA, "0.975Thresh" = NA, "0.99Thresh" = NA, "0.999Thresh" = NA)
#Calculate HEMs for all phenotypes
for(i in 1:dim(dat)[2]) { #i will be each isolate
print(colnames(dat)[i])
MyX <- matrix(1, dim(dat)[1], 1)
Pheno.BLUP.result <- bigRR(y = dat[,i], X = MyX, Z = SNPs, GPU = TRUE)
Pheno.HEM.result <- bigRR_update(Pheno.BLUP.result, SNPs)
outpt.HEM <- cbind(outpt.HEM, Pheno.HEM.result$u)
#Permute Thresholds for Phenos - this is what takes forever
perm.u.HEM <- vector()
for(p in 1:1000) {
if(p %% 10 == 0) {print(paste("Thresh sample:", p, "--", Sys.time()))}
try(temp.Pheno <- sample(dat[,i], length(dat[,i]), replace = FALSE))
try(temp.BLUP  <- bigRR(y = temp.Pheno, X = MyX, Z = SNPs, GPU = TRUE),silent = TRUE)
temp.HEM <- bigRR_update(temp.BLUP, SNPs) #REF change- was bigRR_update(Pheno.BLUP.result...
perm.u.HEM <- c(perm.u.HEM, temp.HEM$u)
}
#write.csv(perm.u.HEM, paste("PermEffects_",colnames(dat)[i],".csv",sep=""))
thresh.HEM$"0.95Thresh"[i] <- quantile(abs(perm.u.HEM),0.95)
thresh.HEM$"0.975Thresh"[i] <- quantile(abs(perm.u.HEM),0.975)
thresh.HEM$"0.99Thresh"[i] <- quantile(abs(perm.u.HEM),0.99)
thresh.HEM$"0.999Thresh"[i] <- quantile(abs(perm.u.HEM),0.999)
colnames(outpt.HEM)[i+1] <- paste(colnames(dat)[i],"HEM",sep=".")
}
#Give column names to the thresholds from the HEM list
for(j in 1:length(thresh.HEM)) {
names(thresh.HEM[[j]]) <- colnames(dat)
}
#RF-give row names to thresh.HEM and thresh.BLUP so that threshhold values will line up correctly with phenotypes, and you can see which threshold value is displayed
thresh.HEM$"0.95Thresh" <- c("0.95 Thresh", thresh.HEM$"0.95Thresh")
thresh.HEM$"0.975Thresh" <- c("0.975 Thresh", thresh.HEM$"0.975Thresh")
thresh.HEM$"0.99Thresh" <- c("0.99 Thresh", thresh.HEM$"0.99Thresh")
thresh.HEM$"0.999Thresh" <- c("0.999 Thresh", thresh.HEM$"0.999Thresh")
#Write results to output
write.csv(rbind(thresh.HEM$"0.95Thresh",thresh.HEM$"0.975Thresh",thresh.HEM$"0.99Thresh",thresh.HEM$"0.999Thresh",outpt.HEM),"04_bigRRoutput/Domest/Gm_Les.Pheno_HEM.D.csv")
rm(list=ls())
setwd("~/Documents/GitRepos/BcEudicotGWAS/data/RG_soybean/")
SNPs <- read.csv("02_csvprep/Domest/hp_binaryMAF20.csv", row.names = 1)
SNPs_rename <- SNPs
SNPnames <- read.csv("02_csvprep/Domest/Key_SNPnames.csv")
SNPnames <- SNPnames[c(2,4)]
#read in model data with 2 trays dropped
Pheno.D <- read.csv("02_csvprep/Domest/RG_phenoDandW.csv")
#change names from genotype file to isolate names
#File SNPs_rename has columns of isolate genotypes that I want to rename
#File SNPnames is a list indexing original names to match (SNPname), and actual name to replace it (GenoRename)
names( SNPs_rename ) <- SNPnames[ match( names( SNPs_rename ) , SNPnames[ , 'SNPname' ] ) ,'GenoRename' ]
#change names from phenotype file to isolate names
Pheno.D$REF <- SNPnames[ match( Pheno.D$REF , SNPnames[ , 'SNPname' ] ) ,'GenoRename' ]
library(plyr)
unique(Pheno.D$REF)
unique(SNPnames$GenoRename)
## now only keep genotypes and phenotypes that match
#save practice file
#miniSNPs <- SNPs_rename[c(1:3),]
#write.csv(miniSNPs, "miniSNP_practice.csv")
#only keep phenotype rows that match SNP names
SNPMt <- as.data.frame(names(SNPs_rename))
PhenoMatch.D <- Pheno.D
PhenoMatch.D <- PhenoMatch.D[PhenoMatch.D$REF%in% SNPMt$"names(SNPs_rename)", ]
#only keep SNP rows that match phenotype names
#select column with isolate names
PhenoMt.D <- as.data.frame(PhenoMatch.D[,1])
SNPMatch.D <- SNPs_rename
#save first 3 columns: won't match Pheno names
SNPs3 <- SNPs_rename[,c(1:3)]
SNPMatch.D <- SNPMatch.D[names(SNPMatch.D) %in% (PhenoMt.D[,1])]
SNPMatch.D <- SNPMatch.D[ , order(names(SNPMatch.D))]
SNPMatch2.D <- cbind(SNPs3,SNPMatch.D)
#remove 01.01.06 duplicate
SNPMatch2.D <- SNPMatch2.D[,-9]
#sort pheno match
PhenoMatch2.D <- PhenoMatch.D[order(PhenoMatch.D$REF),]
#remove 01.01.06 duplicate
PhenoMatch2.D <- PhenoMatch2.D[-6,]
unique(PhenoMatch2.D$REF)
PhenoMatch2.D$REF
unique(SNPnames$GenoRename)
View(SNPnames)
SNPnames$GenoRename)
SNPnames$GenoRename
View(SNPMatch2.D)
unique(names(SNPMatch2.D))
names(SNPMatch2.D)
PhenoMatch2.D$REF
names(SNPMatch2.D)
Check$PHENOS <- PhenoMatch2.D$REF
myCheck <- data.frame(PHENOS, GENOS)
myCheck <- data.frame(PhenoMatch2.D$REF, names(SNPMatch2.D))
genosList <- names(SNPMatch2.D)
removeList <- c(X.CHROM, POS, REF)
removeList <- c("X.CHROM", "POS", "REF")
setdiff(genosList,removeList)
genosList <- setdiff(genosList,removeList)
myCheck <- data.frame(PhenoMatch2.D$REF, genosList)
View(myCheck)
setdiff(genosList,PhenoMatch2.D$REF)
setdiff(names(SNPMatch2.D, PhenoMatch2.D$REF))
setdiff(names(SNPMatch2.D), PhenoMatch2.D$REF))
setdiff(names(SNPMatch2.D), PhenoMatch2.D$REF)
rm(list=ls())
setwd("~/Documents/GitRepos/BcEudicotGWAS/data/RG_soybean/")
#########################
# This makes the bigRR_update run through the GPU
# You need to do this first to mask the native 'bigRR_update' in the bigRR package
# one alternative to family = gaussian(link = identity) is family = poisson(link = log)
## RAN first time WITH POISSON. Lesion size expected to be Gaussian
bigRR_update <- function (obj, Z, family = gaussian(link = identity), tol.err = 1e-06,
tol.conv = 1e-08)
{
w <- as.numeric(obj$u^2/(1 - obj$leverage))
w[w < tol.err] <- tol.err
bigRR(y = obj$y, X = obj$X, Z = Z, family = family, weight = w,
tol.err = tol.err, tol.conv = tol.conv, GPU = TRUE )
}
########################
#NOTE1 FROM RACHEL:  we need bigRR1.3-9 to get GPU option
# must download R-Forge version bigRR1.3-9tar.gz and manually install
# https://r-forge.r-project.org/R/?group_id=1301
# install.packages("bigRR", repos="http://R-Forge.R-project.org")
#NOTE2 FROM RACHEL: need package 'gputools' but CRAN version fails to install
# must first install Nvidia's CUDA toolkit -current version is 7.5
# installed from developer.nvidia.com/cuda-downloads
library(bigRR) #check if version is 1.3-9
library(bigRR)
?bigRR
which(bigRR)
SNPs <- read.csv("03_bigRRinput/Domest/binSNP_bigRR_MAF20hp.D.csv", row.names = 1)
FullSNPs <- SNPs
SNPs <- FullSNPs
e
SNPs$Chr.Base <- do.call(paste, c(SNPs[c("X.CHROM","POS")], sep="."))
View(SNPs)
rownames(SNPs) <- SNPs[,98] #set the new column of chrom.base as rownames - this could maybe be written as: rownames(SNPs) <- SNPs$Chr.Base?
rownames(SNPs) <- SNPs[,97] #set the new column of chrom.base as rownames - this could maybe be written as: rownames(SNPs) <- SNPs$Chr.Base?
any(duplicated(SNPs$Chr.Base))#check that none are duplicated
SNPs <- SNPs[,4:96] #take out first three cols (X.CHROM, POS, REF) and new last col (Chr.Base). dim(SNPs) should now be [345485, 91], colnames(SNPs) are all Bc Isolates, rownames(SNPs) are all Chr.Base
SNPs <- as.matrix(t(SNPs))
for(i in 1:dim(SNPs)[1]) {
SNPs[i,] <- as.numeric(SNPs[i,])
}
#read in phenotype data
Phenos <- read.csv("03_bigRRinput/Domest/Gm_Les.Pheno_bigRR.D.csv", row.names = 1)
View(Phenos)
View(Phenos)
dat <- as.data.frame((Phenos[,2:6]))  #INSERT PHENOTYPE COLUMNS HERE
outpt.HEM <- colnames(SNPs)
thresh.HEM <- list("0.95Thresh" = NA, "0.975Thresh" = NA, "0.99Thresh" = NA, "0.999Thresh" = NA)
for(i in 1:dim(dat)[2]) { #i will be each isolate
print(colnames(dat)[i])
MyX <- matrix(1, dim(dat)[1], 1)
Pheno.BLUP.result <- bigRR(y = dat[,i], X = MyX, Z = SNPs, GPU = TRUE)
Pheno.HEM.result <- bigRR_update(Pheno.BLUP.result, SNPs)
outpt.HEM <- cbind(outpt.HEM, Pheno.HEM.result$u)
#Permute Thresholds for Phenos - this is what takes forever
perm.u.HEM <- vector()
for(p in 1:1000) {
if(p %% 10 == 0) {print(paste("Thresh sample:", p, "--", Sys.time()))}
try(temp.Pheno <- sample(dat[,i], length(dat[,i]), replace = FALSE))
try(temp.BLUP  <- bigRR(y = temp.Pheno, X = MyX, Z = SNPs, GPU = TRUE),silent = TRUE)
temp.HEM <- bigRR_update(temp.BLUP, SNPs) #REF change- was bigRR_update(Pheno.BLUP.result...
perm.u.HEM <- c(perm.u.HEM, temp.HEM$u)
}
#write.csv(perm.u.HEM, paste("PermEffects_",colnames(dat)[i],".csv",sep=""))
thresh.HEM$"0.95Thresh"[i] <- quantile(abs(perm.u.HEM),0.95)
thresh.HEM$"0.975Thresh"[i] <- quantile(abs(perm.u.HEM),0.975)
thresh.HEM$"0.99Thresh"[i] <- quantile(abs(perm.u.HEM),0.99)
thresh.HEM$"0.999Thresh"[i] <- quantile(abs(perm.u.HEM),0.999)
colnames(outpt.HEM)[i+1] <- paste(colnames(dat)[i],"HEM",sep=".")
}
#Give column names to the thresholds from the HEM list
for(j in 1:length(thresh.HEM)) {
names(thresh.HEM[[j]]) <- colnames(dat)
}
#RF-give row names to thresh.HEM and thresh.BLUP so that threshhold values will line up correctly with phenotypes, and you can see which threshold value is displayed
thresh.HEM$"0.95Thresh" <- c("0.95 Thresh", thresh.HEM$"0.95Thresh")
thresh.HEM$"0.975Thresh" <- c("0.975 Thresh", thresh.HEM$"0.975Thresh")
thresh.HEM$"0.99Thresh" <- c("0.99 Thresh", thresh.HEM$"0.99Thresh")
thresh.HEM$"0.999Thresh" <- c("0.999 Thresh", thresh.HEM$"0.999Thresh")
#Write results to output
write.csv(rbind(thresh.HEM$"0.95Thresh",thresh.HEM$"0.975Thresh",thresh.HEM$"0.99Thresh",thresh.HEM$"0.999Thresh",outpt.HEM),"04_bigRRoutput/Domest/Gm_Les.Pheno_HEM.D.csv")
View(dat)
for(i in 1:dim(dat)[2]) { #i will be each isolate
print(colnames(dat)[i])
MyX <- matrix(1, dim(dat)[1], 1)
Pheno.BLUP.result <- bigRR(y = dat[,i], X = MyX, Z = SNPs, GPU = TRUE)
Pheno.HEM.result <- bigRR_update(Pheno.BLUP.result, SNPs)
outpt.HEM <- cbind(outpt.HEM, Pheno.HEM.result$u)
#Permute Thresholds for Phenos - this is what takes forever
perm.u.HEM <- vector()
for(p in 1:1000) {
if(p %% 10 == 0) {print(paste("Thresh sample:", p, "--", Sys.time()))}
try(temp.Pheno <- sample(dat[,i], length(dat[,i]), replace = FALSE))
try(temp.BLUP  <- bigRR(y = temp.Pheno, X = MyX, Z = SNPs, GPU = TRUE),silent = TRUE)
temp.HEM <- bigRR_update(temp.BLUP, SNPs) #REF change- was bigRR_update(Pheno.BLUP.result...
perm.u.HEM <- c(perm.u.HEM, temp.HEM$u)
}
}
colnames(dat)
